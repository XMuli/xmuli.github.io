<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>偕臧</title>
  
  
  <link href="https://ifmet.cn/atom.xml" rel="self"/>
  
  <link href="https://ifmet.cn/"/>
  <updated>2024-02-29T20:32:13.000Z</updated>
  <id>https://ifmet.cn/</id>
  
  <author>
    <name>偕臧</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新作：Sunny Screenshot 是 截图 &amp; 钉图的跨平台软件，亦支持“OCR”和“图片翻译”功能</title>
    <link href="https://ifmet.cn/posts/d4fdd6a4/"/>
    <id>https://ifmet.cn/posts/d4fdd6a4/</id>
    <published>2024-02-29T20:32:13.000Z</published>
    <updated>2024-02-29T20:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong>  仅纯粹 C++ 开发了一款 Sunny 截图软件，原生应用；支持 <strong>“截图 &amp; 钉图”、”图片翻译”、”OCR提取文字”</strong> 等功能，多套皮肤和 Win10 的亚克力效果（类透明磨砂），简洁整体设计的窗口， </p><p>支持跨平台：已验证可运行在的系统  ヾ(≧▽≦*)o；</p><p><strong>官网：</strong> <a href="https://sunny.xmuli.tech/">https://sunny.xmuli.tech</a></p><p>支持跨平台：已验证可运行在的系统 ヾ(≧▽≦*)o，详见官网文档</p><p>① Windows 7 &#x2F; 8 &#x2F; 10 &#x2F; 11</p><p>② MacOS： 10 &#x2F; 11 &#x2F; 12 &#x2F; 13 &#x2F; 14</p><p>③ Linux：Debian 12，Ubuntu 20.04 &#x2F; 22.04 &#x2F; 24.04，Deepin&#x2F;UOS V20-23, openkylin 1.0.x，等</p><p>现已上架 Microsoft Store 和 Linux  多个应用商城，撒花🎊🎊🎊🎉🎉🎉；</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif" width="100%"/ loading="lazy"><p>开发完之后一直也没有宣传过，寂静的在的一隅仓库呆着着； 直到连续几天发现涌入大量流量，Star 也随之猛长；蛤？着什么情况，我啥也没干了。问了下新人，才知 Sunny 已被很多大佬和知名软件网站给翻牌子了，属实意外惊喜╰(<em>°▽°</em>)╯。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Sunny 截图是使用纯 C++ 开发的一款简洁且漂亮的 “截图&amp;拼图” 的软件工具，亦支持图片翻译和OCR 等功能；支持 Windows，MacOS，Linux 平台。</p><p>本项目从 2023 年起，至少会持续开发和维护十年，再更久的事情，那就彼时再说~；可以放心使用，因为我自身也在使用；</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>**官网: ** <a href="https://sunny.xmuli.tech/">https://sunny.xmuli.tech</a>   |   <strong>作者：</strong> <a href="https://github.com/XMuli">偕臧</a></p><p><a href="https://github.com/XMuli/SunnyPages">GitHub</a>   |   <a href="https://gitee.com/XMuli/SunnyPages">Gitee</a>   |   <a href="https://github.com/XMuli/SunnyPages/releases">Releases</a>   |   <a href="https://github.com/XMuli/SunnyPages/issues">Issues</a>   |   App Store : Microsoft Store &#x2F; Deepin Store &#x2F; UOS Store &#x2F; Spark Store &#x2F; </p><p>反馈 Bug, 提出建议或者想法，任何帮助改进，亦可加入交流群：<img src="https://img.shields.io/badge/QQ_Groups-418103279-brightgreen" alt="alt text" loading="lazy"></p><h2 id="功能特色"><a href="#功能特色" class="headerlink" title="功能特色"></a>功能特色</h2><ul><li><strong>特色功能</strong><ul><li>截图 &amp; 钉图</li><li>图片翻译（中&#x2F;英&#x2F;日&#x2F;韩&#x2F;俄&#x2F;等）</li><li>OCR 提取文字</li><li>窗口属性</li><li>自动检测</li><li>代码签名</li></ul></li><li><strong>样式功能</strong><ul><li>亚克力的透明磨砂</li><li>自定义的活动色</li><li>自定义”边框 &amp; 十字线”的宽度</li><li>绘画工具栏支持：垂直 &amp; 水平</li><li>钉图窗口的阴影效果</li><li>钉图透明度</li><li>多种系统风格</li></ul></li><li><strong>其它功能</strong><ul><li>自定义尺寸和位置截图、延时截图、窗口检测截图</li><li>翻译和提取文字的 API，支持用私人 key</li><li>手动保存 &amp; 快捷保存 &amp; 自动保存</li><li>自动拷贝到剪切板</li><li>调整字体及大小</li><li>快捷键自定义</li><li>国际化翻译</li><li>开源库鸣谢</li></ul></li><li><strong>跨平台移植</strong><ul><li>Windows 7 &#x2F; 8 &#x2F; 10 &#x2F; 11+</li><li>Ubuntu 20.04 &#x2F; 22.04+</li><li>Deepin &#x2F; UOS V20.9 - 23+</li><li>openkylin V1.0.1+</li></ul></li><li><strong>App Store 已上架</strong><ul><li>Microsoft Store                     微软商店</li><li>Deepin &#x2F; UOS Store              深度社区 &#x2F; 统信商店</li><li>Spark Store                            星火商店</li><li>openkylin Store (Ongoing)   麒麟商店</li></ul></li></ul><br><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li><li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li></ul><br><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p><a href="https://www.bilibili.com/video/BV1c4421c7Hy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192034134.png" width="100"/ loading="lazy"></a>  👉 <a href="https://www.bilibili.com/video/BV1c4421c7Hy">Sunny 截图是一款简洁且漂亮的截图的软件工具，亦支持【图片翻译】和【OCR】</a></p><video width="100%" height="100%" controls autoplay loop>  <source src="snapshot/Sunny-introduce.mp4" type="video/mp4">  Sunny-introduce.mp4  XMuli Sunny Screenshot 截图 软件 跨平台 简洁 漂亮</video><br><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><h4 id="Windows-10-x2F-11"><a href="#Windows-10-x2F-11" class="headerlink" title="Windows 10&#x2F;11+"></a>Windows 10&#x2F;11+</h4><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272301064.png" width="48%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272303776.png" width="48%"/ loading="lazy"></p><h4 id="MacOS-10-15-13"><a href="#MacOS-10-15-13" class="headerlink" title="MacOS 10.15~13+"></a>MacOS 10.15~13+</h4><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010038655.jpg" width="48%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010037565.jpg" width="48%"/ loading="lazy"></p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li><p><strong>Ubuntu 22.04</strong></p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272304154.png" width="45%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305584.png" width="45%"/ loading="lazy"></p></li><li><p>Deepin V20.9 &#x2F; UOS</p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305050.jpg" width="45%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305129.jpg" width="45%"/ loading="lazy"></p></li><li><p><strong>openkylin V1.0.1</strong></p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238634.png" width="45%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238459.png" width="45%"/ loading="lazy"></p></li></ul><br><h2 id="代码签名证书"><a href="#代码签名证书" class="headerlink" title="代码签名证书"></a>代码签名证书</h2><blockquote><p>极力推荐从 GirHub <a href="https://github.com/XMuli/SunnyPages/releases">Release</a> 下载，更新最快最稳定。下载文件后，文件右键属性校验其唯一性，确保文件没被篡改；</p></blockquote><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402010109545.png" width="800"/ loading="lazy"><h2 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h2><table><thead><tr><th>Keys</th><th>Description</th><th>Mode</th></tr></thead><tbody><tr><td><kbd>F6</kbd></td><td>窗口激活截图图</td><td>全局</td></tr><tr><td><kbd>Ctrl</kbd> + <kbd>F6</kbd></td><td>仅延时截图</td><td>全局</td></tr><tr><td><kbd>Shift</kbd> + <kbd>F6</kbd></td><td>自定义截图（起点位置 + 截图区域 + 延迟时间）</td><td>全局</td></tr><tr><td>🐱‍🐉</td><td></td><td></td></tr><tr><td><kbd>Esc</kbd></td><td>退出截图</td><td>本地</td></tr><tr><td><kbd>Tab</kbd></td><td>切换挡位，检测的子窗口矩形的深度</td><td>本地</td></tr><tr><td><kbd>`</kbd> &#x2F; <kbd>~</kbd></td><td>显示捕捉窗口的属性信息 （Path&#x2F;Size&#x2F;PID&#x2F;HWnd …）</td><td>本地</td></tr><tr><td><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>S</kbd></td><td>快捷键快速保存到到指定的路径</td><td>本地</td></tr><tr><td><kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd> ( <kbd>A</kbd>, <kbd>S</kbd>, <kbd>W</kbd>, <kbd>D</kbd> )</td><td>移动选中区域 1px</td><td>本地</td></tr><tr><td><kbd>Ctrl</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>外扩选中区域 10 px</td><td>本地</td></tr><tr><td><kbd>Shift</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>内缩选中区域 10 px</td><td>本地</td></tr></tbody></table><h2 id="应用商店下载"><a href="#应用商店下载" class="headerlink" title="应用商店下载"></a>应用商店下载</h2><h3 id="Microsoft-Store"><a href="#Microsoft-Store" class="headerlink" title="Microsoft Store"></a>Microsoft Store</h3><p>在 Window 10&#x2F;11+ 系统，也在微软商店直接下载</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif" width="80%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010108405.gif" width="80%"/ loading="lazy"><br><h3 id="Deepin-x2F-UOS-Store"><a href="#Deepin-x2F-UOS-Store" class="headerlink" title="Deepin &#x2F; UOS Store"></a>Deepin &#x2F; UOS Store</h3><p>深度社区、 统信操作系统商店中，已可直接下载</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402190016686.png" width="80%"/ loading="lazy"><h3 id="Spark-Store"><a href="#Spark-Store" class="headerlink" title="Spark Store"></a>Spark Store</h3><p>以及三方的星火商店，也可直接下载</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202403010053091.png" width="80%"/ loading="lazy"><br><h2 id="截图作品系列"><a href="#截图作品系列" class="headerlink" title="截图作品系列"></a>截图作品系列</h2><p>很久之前就想些一个软件截图的软件，目前一共写如下三个层级的难度作品，提供大家参考</p><ul><li><strong>Ⅰ. 新手之作 ShotX</strong><ul><li>项目地址：<a href="https://github.com/XMuli/ShotX">ShotX</a>   |   <a href="https://gitee.com/XMuli/ShotX">镜像</a></li><li>功       能：①基本的截图功能，复制和保存，②右键托盘及菜单，③支持 Window，MacOS，Linux，④攥写 Github-Action 的 CI&#x2F;CD 自动脚本 .yml；实现自动打包和发布，⑤更多见 README 和 源码</li><li>描        述：新手级的截图，适合初学 Qt&#x2F;C++ 入门者</li></ul></li><li><strong>Ⅱ. 高级之作 FLIPPED</strong><ul><li>官       网：<a href="https://flipped.xmuli.tech/">flipped.xmuli.tech</a></li><li>项目地址：<a href="https://github.com/XMuli/FlippedPages">FLIPPED</a>  |  <a href="https://gitee.com/XMuli/FlippedPages">镜像</a></li><li>功       能：①贴图和钉图，②多屏截图，延时截图，自定义截图，③智能检测窗口矩形（Windows &amp; Linux），④矩形、椭圆、箭头、画笔、马赛克、文本、序号，⑤撤销、重做（多级）、保存、取消、拷贝到剪切板，⑥截图框样式三套，且主题色提供自定义；屏幕十字线样式自定义，⑦国际化：英文、简体中文、繁体中文；字体和字号自定义，⑧支持设置窗口，托盘，截图区域之间的流畅切换，⑨更多见 README 和 源码</li><li>描        述：高级难度，适合已学习 Qt&#x2F;C++ 数年经验进阶，需同类型软件的代码借鉴，但可探索中独立写一个大的软件。出发于隐私安全，无任何联网功能。</li></ul></li><li><strong>Ⅲ. 商业级别的成熟之作 Sunny (推荐)</strong><ul><li>官       网：<a href="https://sunny.xmuli.tech/">sunny.xmuli.tech</a></li><li>项目地址：<a href="https://github.com/XMuli/sunnypages">Sunny</a>  |  <a href="https://gitee.com/XMuli/SunnyPages">镜像</a></li><li>功       能：是 FLIPPED 作品的超集合，常见截图功能都都包含。还包含额外的功能：① “图片翻译” (中&#x2F;英&#x2F;日&#x2F;韩&#x2F;俄等)，和”OCR 提取文字”，也支持用户私人token 的额度使用 ，② .iss 脚本和 CMake 来提供便携版，安装版，③ 绘画工具栏的亚克力效果，且支持跨平台（毛玻璃效果），④编辑文本支持富文本，同一个注释可采用多个字体和颜色等（暂未遇到其它同类软件也能做到），⑤全新的 UI&#x2F;UE 设计交互，“设置窗口” 无任何缝隙拼接感，颜值达到简约美观，⑥优化截屏完成后的内存释放；⑦国际化翻译更方便，⑧CMake 重写拆分为 EXE + DLL 隔离，⑨进行代码签名，方便下载校验和防篡改，⑩成功上架 Window 的微软商店，Linux 的 深度&#x2F;统信商店，以及三方的星火商店等；麒麟商店也在上架待审核</li><li>描        述：基于前两个的项目经验和不足，直接重写了一套新的框架和UI界面；目前个人从代码功能和产品体验来说，已经达到 工程代码整洁、规范、稳定和健壮性，优秀的解耦机制，漂亮简约得 UI &#x2F; UX 设计，可以随时应对变化的实际需求，很久之内都无需重构了。定位为 漂亮和简洁，功能实用为主。</li></ul></li></ul><table><thead><tr><th align="center">项目</th><th align="center">描述</th><th align="center">开发经验</th></tr></thead><tbody><tr><td align="center">ShotX</td><td align="center">功能极简的截图工具</td><td align="center">简易，新手级的截图，适合初学 Qt&#x2F;C++ 入门</td></tr><tr><td align="center">FLIPPED</td><td align="center">简洁且漂亮，功能完整的截图软件；隐私安全，无任何联网功能</td><td align="center">高级难度，属 Qt&#x2F;C++ 数年经验的进阶作品，在借鉴同类作品的代码时，可于探索中独立完成的一个大的软件</td></tr><tr><td align="center">Sunny</td><td align="center">一款简洁且漂亮的截图的软件工具。亦支持图片翻译和OCR；已上架微软商店，深度&#x2F;统信商店，及三方的星火商店等</td><td align="center">专业级作品，适合已多年沉浸研究 Qt&#x2F;C++ 经验，随心所欲写任意所需功能，<strong>属于商业级的成熟作品，是本截图系列的最高水准之作</strong></td></tr></tbody></table><blockquote><p><strong>注：</strong> ShotX，FLIPPED，Sunny 这三款均支持跨平台 Windows &#x2F; MacOS &#x2F; Linux。</p><p><strong>笔记：</strong> Sunny  &#x3D;  FLIPPED的功能重构 + 代码重构 + UI重构 + 网络功能（图片翻译+OCR）+ 上架应用商店 + 后续新功能；而 ShotX 是最早的练手探索</p></blockquote><h2 id="如何开发一款截图软件呢？"><a href="#如何开发一款截图软件呢？" class="headerlink" title="如何开发一款截图软件呢？"></a>如何开发一款截图软件呢？</h2><p>在写和发布的后的期间，也遇到很多私聊请教 、 邮件沟通某个功能实现？反馈 Bug 和给出使用心得和建议；都给答疑了，但想来可写为一整篇，中间遇到的困难点都写出来，公开出来提供后来者参考。</p><p><strong>编译环境</strong></p><p>　　💻 <code>MacOS 13 </code> 📎 <code>Qt 5.15.2</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><p>　　💻 <code>Ubuntu 22.04</code> 📎<code>Deepin 20.9-23+</code> 📎 <code>Qt 5.15.2</code> 📎 <code>gcc/g++ 9.0</code>  📎 <code>gdb8.0</code></p><p>　　💻  <code>win10 22H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>Visual Studio 2022</code> 📎 <code>C++17</code></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402281723559.png" width="70%"/ loading="lazy"><h3 id="【整体思路】"><a href="#【整体思路】" class="headerlink" title="【整体思路】"></a>【整体思路】</h3><ul><li><strong>基础窗口：</strong> 创建一个 QWidget 窗口，去掉标题栏后，全屏且置顶，捕获此刻多屏幕状态保存为 QPixamp，然后绘画在 QWidget 最底层，再绘画一层透明黑色作为遮罩</li><li><strong>绘画工具栏：</strong> 作为是一个单独的子窗口，包含两个一级和二级的绘画工具栏，控制二级的显隐</li><li><strong>鼠标光标：</strong> 将 QWidget 放于虚拟桌面的左上角；相对坐标和绝对坐标的转换</li><li><strong>功能思路：</strong> 时刻判断当前所处模式：Wait &#x2F; Select &#x2F; Move &#x2F; Draw &#x2F; Stretch 标记；根据模式标记，对鼠标的 Press &#x2F; Move &#x2F; Release 事件进行对应的操作；重点是鼠标放下和松开时的 QPoint<ul><li>捕获模式：智能窗口 &#x2F; 全屏截图 &#x2F; 延时截图 &#x2F; 自定义截图 等</li><li>绘画模式则细分：一级绘画栏和二级绘画栏（愈加精确的参数）</li><li>拉伸可为：拉伸已绘图形 &#x2F; 选中框 &#x2F; … ，操作是可见区域的任意一个图案</li><li>移动同上</li></ul></li><li><strong>钉图功能：</strong> 独立的窗口，将图片绘画在最底层，且需要重绘缩小一圈，为毛玻璃的彩虹灯预留位置</li><li><strong>杂项但重要：</strong> 国际化，不重启切换语言字体，编译，打包，CI &#x2F;CD，热键，窗口尺寸遍历，显示窗口详细信息及大小，代码签名证书，上架应用商店；太多了，单独成篇写在下面</li></ul><h3 id="【如何购买代码签名】"><a href="#【如何购买代码签名】" class="headerlink" title="【如何购买代码签名】"></a>【如何购买代码签名】</h3><ul><li><p>『问题』写的 EXE 如何进行代码签名？如何购买代码签名，怎么买最便宜？EV &#x2F; Standard &#x2F; Open Source Signing Certificates 的区别是什么？</p><p>详细解答这些问题 《<a href="https://xmuli.blog.csdn.net/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a>》，并且指导最后如何签名。</p><br></li></ul><h3 id="【如何上架应用商城】"><a href="#【如何上架应用商城】" class="headerlink" title="【如何上架应用商城】"></a>【如何上架应用商城】</h3><ul><li><p>『问题』如何上架到微软的 Microsoft Store？如何上架 Linux 的深度&#x2F;统信&#x2F;麒麟商城，以及如三方的星火商店呢？</p><p>篇幅太长，单写了一篇，包含详细上架 Windows Store， Deepin&#x2F;UOS Store, 三方 星火商店等。</p><p>👉 《<a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a>》</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192349047.jpg" width="300"/ loading="lazy"><p><strong>Note：</strong></p><p>个人作品上架微软商店的流程很折磨，最后上架成功后也是拨开云雾；</p><p>若是文章对你有价值，亦可帮我积累Sunny的微软信誉，或者在深度商店的好评，甚至感谢🙇‍ ； </p><p><font color=#D0087E size=5 face="STFangsong">Windows 用户推荐的下载 </font> 👉   <a href="https://github.com/XMuli/SunnyPages/releases/download/v1.3/Sunny_setup_msvc_1.3.0_x64.exe">Sunny_setup_msvc_1.3.0_x64.exe</a>  </p><br></li></ul><h3 id="【打包发布-Windows-x2F-MacOS-x2F-Linux-上】"><a href="#【打包发布-Windows-x2F-MacOS-x2F-Linux-上】" class="headerlink" title="【打包发布 Windows &#x2F; MacOS &#x2F; Linux 上】"></a>【打包发布 Windows &#x2F; MacOS &#x2F; Linux 上】</h3><p>介绍多种平台和格式：①Windows：绿色便携版和安装包 <code>.exe</code> ②MacOS：<code>.app</code> 和 <code>.img</code> ③Linux: 绿色版、 <code>.deb</code> 和 <code>.AppImage</code> </p><ul><li><p>『问题』Windows 如何构建打包为 .exe 文件？如何生成构绿色版和安装版？</p><p>《<a href="https://blog.csdn.net/qq_33154343/article/details/96448388">QT 项目在 Windows 平台上面发布成可执行程序</a>》</p></li><li><p>『问题』MacOS 如何构建打包为 .dmg 文件？</p><p>《<a href="https://xmuli.blog.csdn.net/article/details/96448938#comments">QT 项目在 MacOS 平台上面发布成可执行程序</a>》</p></li><li><p>『问题』Linux 如何构建打包为 .deb 文件、如何打包为通用的 .AppImage 格式？</p><ul><li><p>Linux下又多种打包 <code>.deb</code> 打包方法：</p><ul><li><p>〖方法一〗通过 ldd.sh + Sunny.sh 两个脚本打包依赖，参考《<a href="https://blog.csdn.net/qq_33154343/article/details/96448621">QT 项目在 Linux 平台上面发布成可执行程序</a>》</p></li><li><p>〖方法二〗通过 <code>dh_make</code> + <code>dpkg-buildpackage</code> 命令《<a href="https://blog.csdn.net/qq_33154343/article/details/123778207">Linux 中用 dh_make 将 Qt + CMake 项目打包为 deb 文件</a>》</p></li><li><p>〖方法三，最推荐〗通过 CMake 的 <code>cpack</code> 命令，那样就不需要填写 debian 文件夹下的 control 等文件，直接拷贝相关资源文件过去。 CMakeLists.txt 底部加上 CPack 的相关代码，核心如下：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># CPACK: General Settings</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_GENERATOR <span class="token string">"TBZ2"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_NAME <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">project_name</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token variable">CPACK_PACKAGE_VERSION</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">project_version</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_VENDOR <span class="token string">"https://github.com/XMuli"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_DESCRIPTION_SUMMARY <span class="token string">"Simple and beautiful screenshot software tool for Windows, MacOS and Linux"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_FILE_NAME <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CPACK_PACKAGE_NAME</span><span class="token punctuation">&#125;</span></span>-<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CPACK_PACKAGE_VERSION</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_PACKAGE_CONTACT <span class="token string">"https://sunny.xmuli.tech"</span><span class="token punctuation">)</span><span class="token comment"># 设置Debian软件包的依赖关系</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_DEBIAN_PACKAGE_DEPENDS <span class="token string">"libqt5x11extras5, libqt5svg5"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_SYSTEM_NAME <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">&#125;</span></span>-<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SYSTEM_PROCESSOR</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token punctuation">(</span>CPACK_DEBIAN_PACKAGE_SHILIBDEPS <span class="token boolean">ON</span><span class="token punctuation">)</span><span class="token keyword">include</span><span class="token punctuation">(</span>CPack<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Linux下有多种打包  <code>.AppImage</code>  打包方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#【方式四】使用 linuxdeployqt 方式打包，在 Ubuntu 22.04 打包，不可以使用 -----------------------------</span><span class="token comment">####linuxdeployqt-continuous-x86_64.AppImage 方案可在 Ubuntu 22.04 上面不可行####</span>$ <span class="token punctuation">..</span>/linuxdeployqt-continuous-x86_64.AppImage Sunny <span class="token parameter variable">-appimage</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>  libfuse2但是由于过于作者的固执坚守旧的版本，所以无法使用，理由和可能的解决如下：https://github.com/probonopd/linuxdeployqt/issues/340<span class="token comment">#issuecomment-932712016</span>即：使用linuxdeploy和linuxdeploy-plugin-qt<span class="token comment">#####linuxdeploy-x86_64.AppImage + linuxdeploy-plugin-qt-x86_64.AppImage 下面方案可行#####</span>https://github.com/BearKidsTeam/thplayer/blob/master/.github/workflows/linux.yml<span class="token comment">#L54</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> update$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtbase5-dev qtmultimedia5-dev libqt5multimedia5-plugins$ <span class="token function">sudo</span> add-apt-repository universe$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libfuse2$ <span class="token function">wget</span> https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage$ <span class="token function">wget</span> https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage$ <span class="token function">chmod</span> +x linuxdeploy*.AppImage$ <span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build$ cmake <span class="token punctuation">..</span>$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span>$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>$ <span class="token punctuation">..</span>/linuxdeploy-x86_64.AppImage <span class="token parameter variable">--appdir</span> AppDir <span class="token parameter variable">-e</span> bin/Sunny <span class="token parameter variable">-d</span> bin/resources/cpack/tech.xmuli.sunny.desktop <span class="token parameter variable">-i</span> bin/resources/logo/logo.svg --icon-filename tech.xmuli.sunny <span class="token parameter variable">-p</span> qt <span class="token parameter variable">-o</span> appimage$  ./linuxdeploy-x86_64.AppImage <span class="token parameter variable">--appdir</span> AppDir <span class="token parameter variable">-e</span> build/thplayer <span class="token parameter variable">-d</span> assets/thplayer.desktop <span class="token parameter variable">-i</span> assets/thplayer.svg --icon-filename thplayer <span class="token parameter variable">-p</span> qt <span class="token parameter variable">-o</span> appimage$ <span class="token function">mv</span> TouHou_Player*.AppImage thplayer-linux.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>『问题』如何书写 .yml 的脚本，通过 GitHub 的Action 资源，自动打包构建生成 Release 呢？</p><p>通过写三个系统的 .yml 脚本，路径必须是 <code>.github/workflows</code> ，随着时间的流逝⌛，想要持续构建对应的云系统和 Kit 也必须更新，文档和版本参见 <a href="https://github.com/actions/runner-images/tree/main/images">images</a> ，直接往 .yml  修改；这是一个实际可跑的脚本 <a href="https://github.com/XMuli/ChineseChess/tree/master/.github/workflows">*.yml</a>  都是可以编译成功的，失败可能是额度时间不够了，如某次成功的示例，可看到头像是 GitHub 的头像发布的 <a href="https://github.com/XMuli/ChineseChess/releases/tag/v6.1">Release-v6.1</a> ；</p><br></li></ul><h3 id="【UI-x2F-UX-设计的效果】"><a href="#【UI-x2F-UX-设计的效果】" class="headerlink" title="【UI &#x2F; UX 设计的效果】"></a>【UI &#x2F; UX 设计的效果】</h3><ul><li><p>『问题』截图的一级二级的菜单工具栏，如何实现 Windows7 的透明磨砂 &#x2F;  Windows 的亚克力的效果，且能够支持 Windows &#x2F; Linux &#x2F; MacOS？</p><p>单纯实现亚克力效果不难，难在Linux和 MacOS 上也能实现这个效果？这是当时的一些探索和经验，总结了四种方法放置于 <a href="https://github.com/XMuli/AcrylicWindow">GitHub - AcrylicWindow</a></p></li><li><p>『问题』如何实现一个完美的无边框窗口跨平台，且还要占用低，没有瑕疵BUG，还能白嫖？</p><p>也折腾过，难度也很大，后来发现对于截图，费力可以实现，但是没必要，成本太大；结论：这样现成的没有，目前效果和跨平台都最佳的方案是<a href="https://github.com/wangwenx190/framelesshelper">framelesshelper</a>， 有时放弃也是一种解决方案。</p></li><li><p>『问题』如何实现国际化多语言的切换？尤其是未使用 Qt Designer 来创建 .ui 文件，遇到无 <code>ui-&gt;retranslateUi(this)</code> 函数？不重启软件便可以切换语言</p><p>对于有有 .ui 的部分，可以通过 《<a href="https://xmuli.blog.csdn.net/article/details/114439385">Qt 项目(CMake)设置国际化支持</a>》来解决。对于存手写的控件实现的，且大致实现的思路是：</p><p>下拉框中切换语言时，发射信号 → 全局单例 → 信号和槽函 → 到主窗口的槽函数，在里面进行重新加载语言，所有相关的控件的默认文本，都写在这个函数里面，便可以不重启软件，直接实现语言切换成功</p></li></ul><br><h3 id="【用户体验细节】"><a href="#【用户体验细节】" class="headerlink" title="【用户体验细节】"></a>【用户体验细节】</h3><ul><li><p>『问题』是否需要管理员权限才能运行？</p><p>全程不会弹 UAC 弹窗，不需要管理员权限就可以使用所有功能，也不会中途提权，仅普通用户权限即可，包括导向安装，静默安装，使用卸载；</p></li><li><p>『问题』Windows 和 Linux 支持一次截多个屏幕，MacOS 仅只能截图单个屏幕，如何实现呢？</p><p>MacOS 除了系统自带的截图支持外，至今没有任何一个三方软件可以做到这点，包括大厂等某企鹅的截图的，无解。根原是属于此苹果接口没公开，至少没人能够发现。</p></li><li><p>『问题』如何确保 MacOS 上的效果和 Window上面保持外观的一致？</p><p>一个难点是再 MacOS 上也要和再 Windows 的效果保持一致，于是对不同风格进行对比，但 Fusion 又会倒是 Setting 窗口非原生的样式，但好在十分接近；选取一个平衡点。另外还手绘画了一个二十多个自定义或者复杂控件。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402291521977.gif" width="70%"/ loading="lazy"></li></ul><br><h3 id="【看不见的优化】"><a href="#【看不见的优化】" class="headerlink" title="【看不见的优化】"></a>【看不见的优化】</h3><ul><li><p>『问题』如何解决使用 ESC 取消截图后的内存泄露问题？QPointer 、智能指针、还是单例？</p><p>也花了大力气来探究，在完成一次截图之后，内存的占用会在合适时机自动释放出来；这是定位在消耗内存的变量；开发环境显示器为 4K 27 寸 + 3K笔记本双屏；</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402261748498.png" width="100%"/ loading="lazy"></li><li><p>『问题』对于使用单例模式不止一处时，有序需要多个单例用来传递或者保存数值时候，重复写很容易</p><p>可采用<a href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">奇异递归模板</a>的方式，然后添加一个宏展开为友元类；多个单例都只用写一份，而前提是需要对 《<a href="https://blog.csdn.net/qq_33154343/article/details/128367884">C++ 类的六个特殊成员函数</a>》 很熟悉，才能理解，属于优雅的一种实现。</p></li><li><p>『问题』日志和崩溃生成 DUMP 记录？</p><p>日志可以通过配置文件修改，若是遇到传说的崩溃，亦会自动生成 .dmp 和 崩溃原因；</p><p>转储文件存放： <code>C:/Users/用户名/AppData/Local/XMuli/Sunny/cache/Sunny_Dumps/dump_2024_02_29_11_31_30_714.dmp</code> </p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402291131796.png" width="60%"/ loading="lazy"><p>实现方法可通过 WIN API 来实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span><span class="token function">SetUnhandledExceptionFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LPTOP_LEVEL_EXCEPTION_FILTER<span class="token punctuation">)</span>ApplicationCrashHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注冊异常捕获函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>额，你没接触过 DUMP，完全不会对其进行解剖分析？也简单写了一个使用 WinDbg 进行入门</p><p>《<a href="https://xmuli.blog.csdn.net/article/details/123563647">WinDbg：入门分析 dmp 文件『一』</a>》、《<a href="https://xmuli.blog.csdn.net/article/details/123563753">WinDbg：调试之附加进程生成 dmp『二』</a>》</p></li><li><p>『问题』希望单例运行EXE，确保全局唯一性？</p><p>可以通过共享内存QSharedMemory 和系统信号量 QSystemSemaphore，双重保证程序在一台终端上，仅会运行一个；</p><p>也能杜绝很罕见的一种情况，即使上次程序崩溃之后，但仍有残留的僵死进程，被误判当前没有启动。严谨（中指推一下眼镜）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString uniqueKey <span class="token operator">=</span> <span class="token string">"SunnyUniqueKey"</span><span class="token punctuation">;</span> <span class="token comment">// 使用唯一的标识符来创建共享内存和系统信号量</span>QSharedMemory sharedMemory<span class="token punctuation">;</span>sharedMemory<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span>uniqueKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尝试附加到现有的共享内存并分离</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sharedMemory<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sharedMemory<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 尝试创建共享内存，如果已经存在，表示已经有一个实例在运行, 判断是为了确保在同一台计算机上只能运行一个相同实例的程序。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sharedMemory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"There is already an instance of the application running (by QSharedMemory)!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建系统信号量, 再尝试获取系统信号量，如果已经被其他实例持有，程序就退出, 判断是为了确保在多个进程同时启动时，只有一个进程能够继续执行。QSystemSemaphore用于创建系统信号量，如果系统信号量已经被其他实例持有（比如由于上一次程序异常退出导致信号量未被释放），则acquire函数会返回false，</span>QSystemSemaphore <span class="token function">systemSemaphore</span><span class="token punctuation">(</span>uniqueKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> QSystemSemaphore<span class="token double-colon punctuation">::</span>Open<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>systemSemaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"There is already an instance of the application running (by QSystemSemaphore)!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...程序其它逻辑</span><span class="token comment">// 释放系统信号量</span>systemSemaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><h3 id="【Qt-x2F-C-编码问题】"><a href="#【Qt-x2F-C-编码问题】" class="headerlink" title="【Qt &#x2F; C++ 编码问题】"></a>【Qt &#x2F; C++ 编码问题】</h3><ul><li><p>『问题』截图项目运行直接置顶显示后，按下按键后，窗口无任何响应，需额外点击一下才能开始截图？</p><p>分析和解决方案《<a href="https://blog.csdn.net/qq_33154343/article/details/124639169">Qt新弹窗不响应键盘按键，难道也是无焦点？</a>》</p></li><li><p>『问题』热键输入框控件，输入后显示的方块 ■◆ 乱码？</p><p>分析和解决方案《<a href="https://blog.csdn.net/qq_33154343/article/details/125775732">创建 QKeySequenceEdit() 后，显示方块■◆乱码</a>》，还是多看下 Qt Assistant 解围粗心。</p></li><li><p>『问题』使用 VS2022 和 QtCreator 如何调试 Qt 5.15 的源代码？</p><p>解决方案为《<a href="https://blog.csdn.net/qq_33154343/article/details/131491715">VS2022 And QtCreator10 调试 Qt 源码教程</a>》、《<a href="https://blog.csdn.net/qq_33154343/article/details/120339797">VS2017调试Qt源码</a>》</p></li><li><p>『问题』截图会有很多个属性的校验和“且”的属性使用？</p><p>虽简单，但移除标志位容易忘却，这里简单列举一下《<a href="https://blog.csdn.net/qq_33154343/article/details/126322317">C++ 标志位使用：校验、添加、删除</a>》</p></li><li><p>『问题』Qt Creator 报警告⚠ Misleading indentation； statement is not part of the previous ‘if‘</p><p>那日强迫症，且需要删除空格才能解决，属实比较稀少；记录下解决方案 《<a href="https://blog.csdn.net/qq_33154343/article/details/126215870">Misleading indentation； statement is not part of the previous ‘if‘</a>》</p></li><li><p>『问题』重构此版时候，也会大量使用 Lambda 表达式</p><p>展开讲解一下，若未接触过，属会用会看即可《<a href="https://blog.csdn.net/qq_33154343/article/details/125775706">Lambda 表达式详解</a>》</p></li><li><p>『问题』Visual Studio 断点偶遇进不去相关函数？</p><p>Release实际也是可以调试的，新手容易不知晓，知晓的亦可能会翻车，值得记录下；属于 Release &#x2F; Release with Debug Info &#x2F; Debug 的差异《<a href="https://blog.csdn.net/qq_33154343/article/details/124482152">Visual Studio 断点调试之箭头偏移进错函数，捉虫记</a>》</p></li><li><p>『问题』源码不能外发的情况下，如何进行调试？ </p><p>详细示例《<a href="https://blog.csdn.net/qq_33154343/article/details/123855765">Visual Studio 2019 进行远程调试</a>》</p></li></ul><br><h3 id="【项目杂项】"><a href="#【项目杂项】" class="headerlink" title="【项目杂项】"></a>【项目杂项】</h3><ul><li><p>『问题』 Sunny 截图在在不同系统、编译器上开发、使用不同的 Kit Tools 上面如何解决乱码问题？且有时调试窗口乱码？还有 ANSI，UTF8，UTF8-BOM 采用哪种？</p><p>参考《 <a href="https://blog.csdn.net/qq_33154343/article/details/120661967">愿编程不再乱码(含Qt)-根因深究</a>》，以及 <a href="https://github.com/XMuli/QtExamples">QtExamples</a> 的 “「第 6 章」 QT &#x2F; IDE 乱码根因和解决”</p></li><li><p>『问题』 遇到需要使用的开源三方库，如何优雅的使用 Git 管理，确保拉取三方库即最新，又不会打乱本仓库的历史线？</p><p>开源三方库引入，想要优雅，基本 <code>git submodule</code>  或  <code>git treemodule</code>  命令之间二选一；推荐前者，理由为 《<a href="https://blog.csdn.net/qq_33154343/article/details/123453541">git submodule 基本用法</a>》</p></li><li><p>『问题』 如何选用 LOG 日志库？自己简单封装一套，还是选用开源库？便于后面定位和分析</p><p>比较犹豫和纠结的一个问题，两种都试过；现总结为：项目初期使用自带的 QDebug 即，不够用再写一个类，和宏封装一套，满足需求即可，勿跑偏，功能才是重点。最后期可以选用三方库引入：</p><p>一点经验参考 《<a href="https://blog.csdn.net/qq_33154343/article/details/123457938">Log：日志选型调研『一』</a>》、《<a href="https://xmuli.blog.csdn.net/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a>》、《<a href="https://xmuli.blog.csdn.net/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a>》</p></li><li><p>『问题』CMake 管理跨平台项目，生各平台的 IDE 的解决方案？以及 Window 上自带一些基础宏的数据类型含义？</p><p>现在已经幸福多了，ChatGPT 横空出世，已经可以解答了，故介绍一些高频或者重点宏，自己结合去搜🔍</p><p>CMake 的重要宏：《<a href="https://blog.csdn.net/qq_33154343/article/details/125932219">CMake 设置 Target 输出目录和后缀名</a>》、《<a href="https://blog.csdn.net/qq_33154343/article/details/125928773">CMake 之 BUILD_SHARED_LIBS 和 CMAKE_BUILD_TYPE 用法教程</a>》</p><p>Windows 的重要宏：《<a href="https://blog.csdn.net/qq_33154343/article/details/125775718">LPSTR&#x2F;LPCSTR&#x2F;LPTSTR&#x2F;HWND&#x2F;HANDLE&#x2F;HMODULE&#x2F;HINSTANCE 等含义和区别</a>》</p></li></ul><br><ul><li>【编译遇坑】【杂谈经验总结】等有空再更</li></ul><br><h2 id="番外：意外之喜"><a href="#番外：意外之喜" class="headerlink" title="番外：意外之喜"></a>番外：意外之喜</h2><p><strong>分享一下喜悦</strong></p><p>在 v1.3 发布的那天晚上，记得 downloads 是 900+ 的样子；发布完了就去睡觉了。</p><p>第二天早上一看下载量就是 1k， 1.1k；中午再看一眼就是 1.2k；晚上再看就是 1.3k；</p><p>第三天是 1.4k，</p><p>第四天是 1.5k，</p><p>… …哈哈哈哈哈哈哈哈哈， 放假回家过年了，也没怎么看</p><p>约大大前天回来一看，嗯，还是 1.5k，大家玩的开心愉快</p><p>大前天到了 1.6k</p><p>前天到了 1.7k</p><p>昨天号到了 1.7k</p><p>今天的到了 1.8k , 纪念打卡（–写这篇时）<img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402221425548.png" width="140"/ loading="lazy"></p> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402221515404.jpeg" width="360"/ loading="lazy"><p>在写过的所有软件中，总的下载量虽然不是最大的，但短时间增速率长是最快的 ヾ(≧▽≦*)o。</p><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt;  仅纯粹 C++ 开发了一款 Sunny 截图软件，原生应用；支持 &lt;strong&gt;“截图 &amp;amp; 钉图”、”图片翻译”、”OCR提取文字”&lt;/strong&gt; 等功能，多套皮肤和 Win10 的亚克力效果（类透明磨砂），简洁整体设计的窗口， &lt;/p&gt;
&lt;p&gt;支持跨平台：已验证可运行在的系统  ヾ(≧▽≦*)o；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官网：&lt;/strong&gt; &lt;a href=&quot;https://sunny.xmuli.tech/&quot;&gt;https://sunny.xmuli.tech&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持跨平台：已验证可运行在的系统 ヾ(≧▽≦*)o，详见官网文档&lt;/p&gt;
&lt;p&gt;① Windows 7 &amp;#x2F; 8 &amp;#x2F; 10 &amp;#x2F; 11&lt;/p&gt;
&lt;p&gt;② MacOS： 10 &amp;#x2F; 11 &amp;#x2F; 12 &amp;#x2F; 13 &amp;#x2F; 14&lt;/p&gt;
&lt;p&gt;③ Linux：Debian 12，Ubuntu 20.04 &amp;#x2F; 22.04 &amp;#x2F; 24.04，Deepin&amp;#x2F;UOS V20-23, openkylin 1.0.x，等&lt;/p&gt;
&lt;p&gt;现已上架 Microsoft Store 和 Linux  多个应用商城，撒花🎊🎊🎊🎉🎉🎉；&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif&quot; width=&quot;100%&quot;/&gt;



&lt;p&gt;开发完之后一直也没有宣传过，寂静的在的一隅仓库呆着着； 直到连续几天发现涌入大量流量，Star 也随之猛长；蛤？着什么情况，我啥也没干了。问了下新人，才知 Sunny 已被很多大佬和知名软件网站给翻牌子了，属实意外惊喜╰(&lt;em&gt;°▽°&lt;/em&gt;)╯。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - MacOS" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-MacOS/"/>
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="学习 - C/C++ 序三 商业" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%B8%89-%E5%95%86%E4%B8%9A/"/>
    
    <category term="专栏 - 项目实战开发" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
    <category term="跨平台开发" scheme="https://ifmet.cn/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    <category term="项目作品集合" scheme="https://ifmet.cn/tags/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/"/>
    
    <category term="个人能力提升" scheme="https://ifmet.cn/tags/%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>Sunny 截图上架 Microsoft Store 及Linux商店的指北</title>
    <link href="https://ifmet.cn/posts/9cce5972/"/>
    <id>https://ifmet.cn/posts/9cce5972/</id>
    <published>2024-02-28T07:30:13.000Z</published>
    <updated>2024-02-29T20:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong>  详细介绍如何上架Windows商店的流程，配上流程图！用自己写的 <a href="https://github.com/XMuli/SunnyPages">Sunny 截图</a> 应用软件如何上架到 微软商店 | Microsoft Store 和 Deepin Store 等；</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192349047.jpg" width="300"/ loading="lazy"><p>即使现 2024 年，但这份指南的详细程度也是的网上首份的，亦含 Linux 商店的上架流程，<strong>敬热爱，敬开源，敬自己；</strong></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li><li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li></ul><br><h2 id="上架-App-Store"><a href="#上架-App-Store" class="headerlink" title="上架 App Store"></a>上架 App Store</h2><p>写好的 EXE，添加了应用代码签名之后，是很想上架到应用商店<br>于上一年写了好几个跨平台的桌面应用程序，成功发布之后，添加了应用代码签名之后，接着就是想上架到应用商店</p><ul><li>『<a href="https://github.com/XMuli/ThinkyMatePages">ThinkyMate</a>』:  一款简洁且易用的 ChatGPT &amp; AI 的桌面应用程序，支持ChatGPT 和星火讯飞大模型，以及语音转文本（STT）和文本转语音（TTS）等功能。<sup>官网: <a href="https://thinkymate.com/">https://thinkymate.com/</a></sup></li><li>『<a href="https://github.com/XMuli/SunnyPages">Sunny</a>』:  一款简洁且漂亮的截图 &amp; 钉图的软件工具，亦支持图片翻译和OCR，支持 Windows，MacOS，Linux 平台。<sup>官网: <a href="https://sunny.xmuli.tech/">https://sunny.xmuli.tech</a></sup></li><li>『<a href="https://github.com/XMuli/FlippedPages">FLIPPED</a>』:  一款简洁且漂亮的截图 &amp; 钉图的软件工具，定位于隐私安全，无任何联网功能，亦是 Sunny 的上一代。<sup>官网: <a href="https://flipped.xmuli.tech/">https://flipped.xmuli.tech</a></sup></li></ul><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402281046095.png" width="200"/ loading="lazy"><h2 id="上架-Microsoft-Store-流程"><a href="#上架-Microsoft-Store-流程" class="headerlink" title="上架 Microsoft Store 流程"></a>上架 Microsoft Store 流程</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><font color=#D0087E size=4 face="STFangsong">一图胜千言，完整的上架审核的流程的重难点和提供解决方案。</font></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192226989.svg" width="100%"/ loading="lazy"><br><h3 id="上架步骤"><a href="#上架步骤" class="headerlink" title="上架步骤"></a>上架步骤</h3><p>注册 Microsoft 开发者账号，个人约 ＄19，永久买断制度； 企业版本的 约 ＄99；</p><p>可以上架常规的 EXE、 MSI 以及 MSIX，这些等，只需要签名即可。</p><p><code>*.msi </code>  通常是企业用来批量推送静默升级和安装用的； <code>*.msix</code> 是微软商店推荐的打包格式，类似于一个沙盒，对权限等管理的比较严格，属于 UWP 的效果。</p><p>必定会遇到的坑🕳有：</p><ul><li><p><strong>准备工作</strong></p><ul><li><p>中文语言注册官网存在 bug，需要 F12 修改下代码</p></li><li><p>购买代码签名证书，摸索不同类型的  EV &#x2F; Standard 证书签名；费用：$ 几百-几千🔪&#x2F;每年</p></li><li><p>有自己的官网域名，且备案；费用：￥数百</p></li><li><p>购买对象存储，以及子域名的 DNS 解析，设置 Https 直链下载；费用：￥数百</p></li></ul></li><li><p><strong>上传和微软团队审核</strong></p><ul><li>确保自己的 http<strong>s</strong> 可以上传和下载无虞</li><li>EXE 必须支持命令行默认安装</li><li>安装之前对于 vc_redist.x64.exe 的检测和静默安装</li><li>能够过 Microsoft Defender SmartScreen<ul><li>首先 Defender SmartScreen 必须不会报毒</li><li>满足上一条基础上，其次 Defender SmartScreen 还不能够提示：不知道是否有毒</li></ul></li><li>提供用户隐私保护 和 遇到问题解决得 wiki 得 RUL</li><li>软件功能得主功能是没有 bug，且账号类需要提供测试密码等</li><li>可能好多天都没有进度，无任何变化</li></ul></li></ul><h3 id="值得记录的一些重难点"><a href="#值得记录的一些重难点" class="headerlink" title="值得记录的一些重难点"></a>值得记录的一些重难点</h3><h4 id="①静默安装"><a href="#①静默安装" class="headerlink" title="①静默安装"></a>①静默安装</h4><p>Sunny 截图也能够支持静默安装；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># innosetup制作的 exe 静默安装，其参数为 /silent /norestart</span><span class="token comment"># msi 静默安装参数  BasicMSI.msi /qn  需要管理权限运行 CMD </span>Sunny_setup_msvc_1.3.0_x64.exe<span class="token string">" /VERYSILENT           # 不会出现安装向导（MS 上架用这个）Sunny_setup_msvc_1.3.0_x64.exe"</span> /silent /norestart    <span class="token comment"># 会出现安装向导</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note: <sup><a href="https://www.eitkb.com/show-103.html">url1</a></sup>  <sup><a href="https://www.cnblogs.com/BeyondTechnology/archive/2011/01/15/1936511.html">url2</a></sup></p><h4 id="②微软运行时库的静默安装和检测"><a href="#②微软运行时库的静默安装和检测" class="headerlink" title="②微软运行时库的静默安装和检测"></a>②微软运行时库的静默安装和检测</h4><p>vc_redist.x64.exe 在自己软件安装之前，是必须先检测下，和安装之前默认安装此运行时依赖；</p><p>我的解决方案是 通过 Inno Setup 写一段 .iss 脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">procedure InstallVCRuntime<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>var  szAppName, szParam, szExecutable, szArchitecture, szVCRuntimeInstalled, szFileExists: String<span class="token punctuation">;</span>  nRetCode: Integer<span class="token punctuation">;</span>  bFileExists, bVCRuntimeInstalled: Boolean<span class="token punctuation">;</span> // 定义一个布尔变量  begin  szArchitecture :<span class="token operator">=</span> <span class="token string">'&#123;#MyArchitecture&#125;'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> szArchitecture  <span class="token operator">=</span> <span class="token string">'x64'</span> <span class="token keyword">then</span>  begin    szAppName :<span class="token operator">=</span> <span class="token string">'vc_redist.x64.exe'</span><span class="token punctuation">;</span>  end  <span class="token keyword">else</span>  begin    szAppName :<span class="token operator">=</span> <span class="token string">'vc_redist.x86.exe'</span><span class="token punctuation">;</span>  end<span class="token punctuation">;</span>  szExecutable :<span class="token operator">=</span> ExpandConstant<span class="token punctuation">(</span><span class="token string">'&#123;app&#125;\'</span><span class="token punctuation">)</span> + szAppName<span class="token punctuation">;</span>  bVCRuntimeInstalled :<span class="token operator">=</span> RegKeyExists<span class="token punctuation">(</span>HKEY_LOCAL_MACHINE, <span class="token string">'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\&#123;8bdfe669-9705-4184-9368-db9ce581e0e7&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   // x64或x86 均为此 guid 数值  bFileExists :<span class="token operator">=</span> FileExists<span class="token punctuation">(</span>szExecutable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> bVCRuntimeInstalled <span class="token keyword">then</span>    szVCRuntimeInstalled :<span class="token operator">=</span> <span class="token string">'True'</span>  <span class="token keyword">else</span>    szVCRuntimeInstalled :<span class="token operator">=</span> <span class="token string">'False'</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> bFileExists <span class="token keyword">then</span>    szFileExists :<span class="token operator">=</span> <span class="token string">'True'</span>  <span class="token keyword">else</span>    szFileExists :<span class="token operator">=</span> <span class="token string">'False'</span><span class="token punctuation">;</span>Log<span class="token punctuation">(</span><span class="token string">'-->szAppName:'</span> + szAppName + <span class="token string">' szExecutable:'</span> + szExecutable + <span class="token string">' szArchitecture:'</span> + szArchitecture + <span class="token string">' szVCRuntimeInstalled:'</span> + szVCRuntimeInstalled + <span class="token string">' szFileExists:'</span> + szFileExists + <span class="token string">' The value of &#123;app&#125; is: '</span> + ExpandConstant<span class="token punctuation">(</span><span class="token string">'&#123;app&#125;'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> bVCRuntimeInstalled <span class="token keyword">then</span>      // 系统若已经安装了 VC_redist 则跳过    begin    Log<span class="token punctuation">(</span><span class="token string">'VC_redist is already installed. Skipping installation.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end  <span class="token keyword">else</span>    <span class="token keyword">if</span> bFileExists <span class="token keyword">then</span>            // 此文件存在才安装      begin  Log<span class="token punctuation">(</span><span class="token string">'VC_redist is install'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      szParam :<span class="token operator">=</span> <span class="token string">'/install /quiet /norestart'</span><span class="token punctuation">;</span>      Exec<span class="token punctuation">(</span>szExecutable, szParam, <span class="token string">''</span>, SW_HIDE, ewWaitUntilTerminated, nRetCode<span class="token punctuation">)</span><span class="token punctuation">;</span>      Sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      end    <span class="token keyword">else</span>      begin      Log<span class="token punctuation">(</span><span class="token string">'Executable file not found: '</span> + szExecutable<span class="token punctuation">)</span><span class="token punctuation">;</span>      endend<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-如何购买代码签名证书"><a href="#③-如何购买代码签名证书" class="headerlink" title="③ 如何购买代码签名证书"></a>③ 如何购买代码签名证书</h4><p>可以参考我写的这篇《<a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a>》，已详述购买 EV &#x2F; Standard &#x2F; Open Source 的 Code Signing Certificate 🎉🎉🎉过程，还有如何进行应用签名；</p><h4 id="④过五关斩六将之-Defender-SmartScreen"><a href="#④过五关斩六将之-Defender-SmartScreen" class="headerlink" title="④过五关斩六将之 Defender SmartScreen"></a>④过五关斩六将之 Defender SmartScreen</h4><p>还要能够过  <a href="https://learn.microsoft.com/en-us/windows/security/operating-system-security/virus-and-threat-protection/microsoft-defender-smartscreen/">Microsoft Defender SmartScreen</a>， 里面是一套一套的，初次提交被拒好几次都属正常。若是 EV 企业证书，氪大金，直接过。若是 Standard &#x2F; Open Source 这类标准证书，需先将 EXE 提交 <a href="https://www.microsoft.com/en-us/wdsi/filesubmission/">Submit a file for malware analysis</a>， 重复多提交几次后，虽不会再报毒；但是审核依旧是会被拒绝， WHAT THE FUCK？？？</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192112902.png" width="100%"/ loading="lazy"><p>对应实际的运行弹窗是这个</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402281027210.png" width="50%"/ loading="lazy"><p>唯一解决方案就是等待，待 exe 的下载量和安装量足够多，且数量越多，在微软的积累量信誉越多，过阈值即可被认可，顺利上架 Microsoft Store。  </p><p><strong>总结：</strong></p><p>个人作品上架微软商店的流程很折磨，最后上架成功后也是拨开云雾；</p><p>若是文章对你有价值，亦可帮我积累Sunny的微软信誉，甚至感谢🙇‍ ； 截图下载 👉   <a href="https://github.com/XMuli/SunnyPages/releases/download/v1.3/Sunny_setup_msvc_1.3.0_x64.exe">Sunny_setup_msvc_1.3.0_x64.exe</a>  </p><br><h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><p>微软商店 GIF 见文章顶部截图，此为 Web 预览的截图：</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231501935.gif" width="80%"/ loading="lazy"><h2 id="上架微软驱动"><a href="#上架微软驱动" class="headerlink" title="上架微软驱动"></a>上架微软驱动</h2><p>驱动认证，可找一些 WHQL 实验室给过，费用约￥ 1w &#x2F;次。或者自己买 EV 证书自己过  WHQL，周期会很长 。</p><p>验证方式为 Windows Update 驱动中可看到，另外一种是在 <a href="https://www.catalog.update.microsoft.com/">catalog.update.microsoft.com</a> 中查询，驱动是否上架了和微软推送了。 驱动上架就不展开讲述了。</p><br><h2 id="上架-Deepin-x2F-UOS-Store-流程"><a href="#上架-Deepin-x2F-UOS-Store-流程" class="headerlink" title="上架 Deepin &#x2F; UOS Store 流程"></a>上架 Deepin &#x2F; UOS Store 流程</h2><h3 id="上架步骤-1"><a href="#上架步骤-1" class="headerlink" title="上架步骤"></a>上架步骤</h3><p><strong>上架方式分为两种</strong></p><p>①若是需要上架到 UOS Stoe ，则需要注册对应开发者账号，官方文档 <a href="https://doc.chinauos.com/content/L7nFinQB_uwzIp6HNV7S">应用上架指南</a>。额(⊙﹏⊙)，但需要实名填写相关信息，通过之后就可以同时上架到 UOS 商业和 Deepin 社区两个版本。</p><p>可以在看到历史的每一个包和上架的版本，这一点很棒很有心，且每一种语言的展示也是用 Tab 页显示出来了，体验很出彩。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192259665.png" width="100%"/ loading="lazy"><p>②若【仅】想要上架 Deepin 社区，突然发现前不久，有新出来了一种简化了的投递流程（2024.02.19），方便多了 <a href="https://www.deepin.org/zh/deliver-applications/">社区投递系统使用说明</a>， 基本直接上传应用包即可。</p><h3 id="展示效果-1"><a href="#展示效果-1" class="headerlink" title="展示效果"></a>展示效果</h3><p><strong>已在 Deepin V20.9-V23 上移植完成</strong></p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305050.jpg" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312272305129.jpg" width="50%"/ loading="lazy"></p><p><strong>上架 深度商店效果</strong></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402190016686.png" width="70%"/ loading="lazy"><p>还发现了当初上架的一个开源软件 <a href="https://github.com/XMuli/lfxSpeed">lfxSpeed</a>，一个简单的 Deepin&#x2F;UOS 的任务栏网速插件，真时间匆匆~</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192320479.png" width="70%"/ loading="lazy"><h2 id="上架-Speak-Store-流程"><a href="#上架-Speak-Store-流程" class="headerlink" title="上架 Speak Store 流程"></a>上架 Speak Store 流程</h2><h3 id="上架步骤-2"><a href="#上架步骤-2" class="headerlink" title="上架步骤"></a>上架步骤</h3><p>上架星火商店步骤</p><ul><li>【方式一】直接在 <a href="https://upload.deepinos.org.cn/index">https://upload.deepinos.org.cn/index</a>  网页上传 .deb 和截图等信息即可</li><li>【方式二】摇人 →  <a href="https://www.spark-app.store/">spark-app.store</a></li></ul><br><h3 id="展示步骤"><a href="#展示步骤" class="headerlink" title="展示步骤"></a>展示步骤</h3><p>上架成功</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192253590.png" width="70%"/ loading="lazy"><p><strong>Note：</strong> 网页上传 .deb 总是错误，解决方案，必须在 Linux 系统下进行上传 .deb 才会成功；</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192250562.png" width="400"/ loading="lazy"><br><h2 id="上架-openkylin-Store-流程"><a href="#上架-openkylin-Store-流程" class="headerlink" title="上架 openkylin Store 流程"></a>上架 openkylin Store 流程</h2><p>已移植到 openkylin 1.0.1 等版本，运行效果。</p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238634.png" width="35%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192238459.png" width="35%"/ loading="lazy"></p><h3 id="上架步骤-3"><a href="#上架步骤-3" class="headerlink" title="上架步骤"></a>上架步骤</h3><p><strong>上架规则</strong></p><p>需填写《开源软件上架申请表格_V1.0.0.docx》，且对 .deb 的 debian 文件夹的文件有点格式要求；参考如下。符合标准后提交表格和 .deb 即可。</p><p>版本镜像下载：<a href="https://www.c.top/downloads/">openkylin  1.x X86</a></p><p><strong>详细规则参考：</strong></p><p>1、 包名_版本_架构.deb，各个字段需要与control文件里的参数保持一致。</p><p>2、 包名不能含有中文，只能包含数字字母和三个符号（.+-），英文字母必须是小写，版本号必须以数字开头，架构只能为arm64和amd64和misp64el</p><p>例如：powerword_1.0_arm64.deb （均为下划线）</p><p>3、 软件中文名称、英文名称，各长度小于50个字符。</p><p>4、 icon（规范：128像素*128像素）；</p><p>5、 软件截图（宽&#x2F;高 1.5 按此长宽比的应用实际截图分辨率即可（至少5张）建议尺寸：1000像素*680像素）</p><p>6、 软件分类：精品、办公、开发、图像、影音、网络、游戏、教育、社交、其他、系统。最多选3个，第一个为主分类，后两个为附属分类。</p><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且永久免费！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt;  详细介绍如何上架Windows商店的流程，配上流程图！用自己写的 &lt;a href=&quot;https://github.com/XMuli/SunnyPages&quot;&gt;Sunny 截图&lt;/a&gt; 应用软件如何上架到 微软商店 | Microsoft Store 和 Deepin Store 等；&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402192349047.jpg&quot; width=&quot;300&quot;/&gt;

&lt;p&gt;即使现 2024 年，但这份指南的详细程度也是的网上首份的，亦含 Linux 商店的上架流程，&lt;strong&gt;敬热爱，敬开源，敬自己；&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402231450384.gif&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - MacOS" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-MacOS/"/>
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - C/C++ 序三 商业" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%B8%89-%E5%95%86%E4%B8%9A/"/>
    
    <category term="专栏 - 项目实战开发" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
    <category term="工程经验" scheme="https://ifmet.cn/tags/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="项目作品集合" scheme="https://ifmet.cn/tags/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>为 Windows10 22H2 启用 Microsoft Copilot 功能</title>
    <link href="https://ifmet.cn/posts/d591d39e/"/>
    <id>https://ifmet.cn/posts/d591d39e/</id>
    <published>2024-02-02T19:27:13.000Z</published>
    <updated>2024-02-02T19:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong>  作为 Window 10 22H2 的长期使用者，也开发了一个 OpenAI ChatGPT 的 <a href="https://blog.csdn.net/qq_33154343/article/details/135488438">客户端</a>，但自己还一直没启用 微软的 Copilot，氪！~；今天有空，就给开启，细致体验一下其 UI&#x2F;UX 的交互和功能的程度。然后理论 Win11 开启的话亦是同理。且是免费可以用，不需要加入内测通道之类的。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021609578.png" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Processor       12th Gen Intel(R) Core(TM) i7-12850HX   2.10 GHz<br>Installed RAM32.0 GB (31.7 GB usable)<br>System type   64-bit operating system, x64-based processor</p><p>Edition             Windows 10 Pro<br>Version            22H2<br>OS build          19045.3930<br>Experience      Windows Feature Experience Pack 1000.19053.1000.0</p><br><h2 id="启用-Copilot-步骤"><a href="#启用-Copilot-步骤" class="headerlink" title="启用 Copilot 步骤"></a>启用 Copilot 步骤</h2><ul><li><strong>地区限制</strong>：目前 Windows Copilot 仅限于美国、北美、英国，以及部分亚洲，南美国家的用户可正常使用（国内目前<strong>无法直接使用</strong></li><li><strong>硬件限制</strong>：微软已确认 Windows Copilot 只能在内存为 4GB及以上 ，屏幕分辨率为 720P以上。</li><li><strong>网络限制：</strong> 能够访问相关网站</li></ul><p>截至今日 2024.02.02 ，如下步骤开启是亲测可行的；</p><h3 id="开启-Copilot-入口"><a href="#开启-Copilot-入口" class="headerlink" title="开启 Copilot 入口"></a>开启 Copilot 入口</h3><ol><li><p><strong>“设置” &gt; “系统” &gt; “关于”</strong>，确保操作系统内部版本号为 Build 19045.3754 (KB5032278)  或更高</p><p>若有需要亦可手动下载 <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB5032278">KB5032278</a> 这个包，实测版本大于即可，没这个 KB 也可以成功。</p></li><li><p>Github下载 <a href="https://github.com/thebookisclosed/ViVe/releases">ViveTool</a> 并将其解压，用于开启 Windows 设备上启用隐藏的实验性功能。</p><p>进入下载目录，管理员执行如下：</p><pre class="line-numbers language-none"><code class="language-none">vivetool &#x2F;enable &#x2F;id:46686174,47530616,44755019<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功提示如下</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021518406.png" width="100%"/ loading="lazy"></li><li><p>重启系统后。观察 Windows Copilot 出现于右下角通知处？若未出现，也可右键任务栏，看是否有Windows Copilot相关的字样，启用即可。</p></li><li><p>若是步骤 3 失败，则打开注册表，进入 <code>Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\Shell\Copilot\BingChat</code> 后，将 IsUserEligible 数值修改为 1，再重复步骤3，即可看到 Copilot 图标</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021524465.png" width="100%"/ loading="lazy"></li><li><p>开启成功</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021527371.png" width="90%"/ loading="lazy"></li></ol><br><h3 id="启用-Copilot-功能"><a href="#启用-Copilot-功能" class="headerlink" title="启用 Copilot 功能"></a>启用 Copilot 功能</h3><ol><li><p>“Settings - Data &amp; time - Region”，将 “Country or region” 设置为 US；最后本机 “ Language” 设置如下.语言应该不是必须的。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021531962.png" width="70%"/ loading="lazy"></li><li><p>必须下载最新版本的 <strong>Edge Beta</strong> 版本，<a href="https://www.microsoft.com/zh-cn/edge/download/insider?form=MA13FJ">Become a Microsoft Edge Insider | Microsoft Edge</a>，安装后可卸载旧的 Edge。此刻再点击，右侧任务栏 Copilot，即可享受。若是想要使用 “文生图” 的功能，需要采用 在 Edge Beta 中登录自己账号，就可以立即在 Edge 中使用 Coplot 功能。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021554740.png" width="100%"/ loading="lazy"></li><li><p>最后，也可在系统自带的中使用 Copilot 中，体验使用 AI 带来的生成式的效率和创意。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2024/202402182209854.png" width="100%"/ loading="lazy"></li></ol><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>  欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt;  作为 Window 10 22H2 的长期使用者，也开发了一个 OpenAI ChatGPT 的 &lt;a href=&quot;https://blog.csdn.net/qq_33154343/article/details/135488438&quot;&gt;客户端&lt;/a&gt;，但自己还一直没启用 微软的 Copilot，氪！~；今天有空，就给开启，细致体验一下其 UI&amp;#x2F;UX 的交互和功能的程度。然后理论 Win11 开启的话亦是同理。且是免费可以用，不需要加入内测通道之类的。&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202402021609578.png&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - AIGC" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-AIGC/"/>
    
    
    <category term="ChatGPT" scheme="https://ifmet.cn/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>简洁且易用的ChatGPT&amp;AI的桌面应用程序ThinkyMate → 不需登录</title>
    <link href="https://ifmet.cn/posts/b27322ad/"/>
    <id>https://ifmet.cn/posts/b27322ad/</id>
    <published>2024-01-10T21:30:13.000Z</published>
    <updated>2024-01-10T21:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong>  开发了一个简洁且易用的 ChatGPT &amp; AI 的桌面应用程序 ThinkyMate；<strong>跨平台，无需登录或注册即可使用。</strong> 已经内置博主的账号 Key，用户也可以自己的私人 API-KEY。</p><iframe width="760" height="427" src="https://www.youtube.com/embed/rRWHK_HzL88?si=cs2IBMO_XF_I6LRV" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><div align="center">  <p>      <h1>      <a href="https://thinkymate.com">          <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312180312618.png" width="60%" alt="ThinkyMate"/ loading="lazy">      </a>    </h1>    <br/>    <h4>Simple and easy to use desktop application for ChatGPT & AI</h4>    <h4>简洁且易用的 ChatGPT & AI 的桌面应用程序</h4>    <h4>簡潔且易用的 ChatGPT & AI 的桌面應用程序</h4>  </p></div><div align="center">  <p align="right"><br><a href="https://thinkymate.com/">English</a> | <a href="https://github.com/XMuli/ThinkyMatePages/blob/master/docs/index.zh_CN.md">简体中文</a></p></div><h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312180314212.png" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312180319043.png" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312260051579.gif" width="100%"/ loading="lazy"><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>Title</th><th>URL</th></tr></thead><tbody><tr><td>Site</td><td><a href="https://thinkymate.com/">thinkymate.com</a></td></tr><tr><td>Guide</td><td><a href="https://github.com/XMuli/ThinkyMatePages/wiki">wiki</a></td></tr></tbody></table><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/XMuli/ThinkyMatePages/releases"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292223219.png" width="210"/ loading="lazy"></a>    <a href="https://apps.microsoft.com/home"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292157810.svg" width="200"/ loading="lazy"></a>    <a href="https://gitee.com/XMuli/ThinkyMatePages/releases"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292217355.svg" width="200"/ loading="lazy"></a></p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><a href="https://www.youtube.com/watch?v=rRWHK_HzL88"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292229454.jpg" width="200"/ loading="lazy"></a>    <a href="https://www.bilibili.com/video/BV12a4y1z7CA"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292229105.png" width="200"/ loading="lazy"></a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><strong>用于 ChatGPT 和 AI 的简单易用的桌面应用程序！</strong> 🎉🎉🎉🎊🎊🎊🎊</p><p><strong>ChatGPT和AI：</strong></p><ul><li>无需注册和登录任何账户即可使用</li><li><strong>无需登录</strong> 即可使用 ChatGPT 和 SparkDesk 聊天和语音的所有功能。</li><li>支持 ChatGPT 和 SparkDesk AI 模型</li><li>支持场景上下文与记录记忆</li><li>支持使用私人 API KEY 使用相关功能。</li><li>支持气泡模式和纯文本模式</li><li>支持显示模式切换：流式（打字机）+常规响应</li><li>支持更换主题： MacOS、Ubuntu、Windows、暗黑模式</li><li>API 密钥采用 AES_256 + CBC 算法加密，密码框输入</li><li>跨平台支持（Windows、MacOS、Linux 操作系统）</li><li>更多值得探索和发现的功能</li></ul><p><strong>语音：</strong></p><ul><li><p>支持文本到语音（TTS）和文本到语音（TTS）功能 </p></li><li><p>支持硬件耳机联动扩展</p></li><li><p>支持自动智能措辞和转换，更流畅自然</p></li><li><p>支持修改语速和替换语音库</p></li></ul><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ol><li><a href="https://github.com/XMuli/ThinkyMatePages/releases">下载</a> 软件包并安装</li><li>Tray Mail 上下文菜单，打开高级设置</li><li>输入 API KEY 以启用相应功能（可选）；请重启软件以确保其生效。<ul><li>输入 OpenAI 密钥以使用 ChatGPT 功能和语音转文字功能</li><li>输入讯飞密钥，使用火花桌面功能</li><li>输入白度密钥使用文本转语音功能</li></ul></li><li>输入语音或文本，享受 ChatGPT 功能！</li><li>更多预览图片请参阅 <a href="https://github.com/XMuli/ThinkyMatePages/tree/master/docs/snapshoot">这里</a></li></ol><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>　　💻 <code>MacOS 13 </code>+ 📎 <code>Qt 5.15</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><p>　　💻 <code>Ubuntu 22.04</code> 📎<code>Deepin 20.9-23+</code> 📎 <code>Qt 5.15.2</code> 📎 <code>gcc/g++ 9.0</code>  📎 <code>gdb8.0</code></p><p>　　💻  <code>win10 22H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>Visual Studio 2022</code> 📎 <code>C++17</code></p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果对您有帮助，或者觉得有用，<strong>您可以点击该仓库的⭐ Star 🍴 Fork 两个图标，方便抬手之间，说点赞的手，</strong> 手留余香；其次可以我喝一杯冰的快乐水。 </p><h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p>如何反馈？非常欢迎您加入我们！您可以 <a href="https://github.com/XMuli/ThinkyMatePages/issues">提一个反馈</a> ;提出任何错误、建议、功能设想，或帮助改进本软件。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p><a href="mailto:&#x78;&#109;&#x75;&#108;&#x69;&#116;&#x65;&#99;&#104;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x78;&#109;&#x75;&#108;&#x69;&#116;&#x65;&#99;&#104;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a> | <a href="https://thinkymate.com/">https://thinkymate.com</a></p><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt;  开发了一个简洁且易用的 ChatGPT &amp;amp; AI 的桌面应用程序 ThinkyMate；&lt;strong&gt;跨平台，无需登录或注册即可使用。&lt;/strong&gt; 已经内置博主的账号 Key，用户也可以自己的私人 API-KEY。&lt;/p&gt;
&lt;iframe width=&quot;760&quot; height=&quot;427&quot; src=&quot;https://www.youtube.com/embed/rRWHK_HzL88?si=cs2IBMO_XF_I6LRV&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - 项目实战开发" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
    
    <category term="学习 - AIGC" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-AIGC/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
    <category term="ChatGPT" scheme="https://ifmet.cn/tags/ChatGPT/"/>
    
    <category term="跨平台开发" scheme="https://ifmet.cn/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    <category term="工程经验" scheme="https://ifmet.cn/tags/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="项目作品集合" scheme="https://ifmet.cn/tags/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>分享如何拥有一份私人的『开源代码签名证书』</title>
    <link href="https://ifmet.cn/posts/92a415a2/"/>
    <id>https://ifmet.cn/posts/92a415a2/</id>
    <published>2024-01-09T18:46:13.000Z</published>
    <updated>2024-02-29T20:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong>  讲解如何拥有一份私人的代码签名证书，还是 『开源代码签名证书』→ </p><p><font color=#D0087E size=6 face="STFangsong">Open Source Code Signing Certificate 🎉🎉🎉</font></p><p>当自己写的软件开发完毕后，若想进行商店软件发布，则下一步需要搞定<strong>『代码签名证书』</strong>。给你的 EXE 标记一个戳，写上一个被 Microsoft 所认证的签名。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282213353.jpg" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li><li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li></ul><br><h2 id="代码签名证书的作用"><a href="#代码签名证书的作用" class="headerlink" title="代码签名证书的作用"></a>代码签名证书的作用</h2><p>代码签名证书（Code Signing Certificates）是什么？有什么用？</p><ol><li>运行程序时候，<strong>UAC 弹窗</strong>（User Account Control）上面会显示 <strong>“发布者（Publisher）”</strong> 的名字；</li><li>用户下载 EXE&#x2F;DLL 之后，通过查看属性签名，可以确保是该发布者发布的，未经过任何篡改</li><li><strong>上架 Microsoft Store 时候，必须要有被 Microsoft 所认可的的签名证书</strong>；反之则会被拒。一些三方商城同理。</li></ol><h2 id="代码签名证书的分类"><a href="#代码签名证书的分类" class="headerlink" title="代码签名证书的分类"></a>代码签名证书的分类</h2><p>证书分为三类</p><ul><li><strong>EV 代码签名</strong>：企业级别，价格最昂贵，无需积累任何信誉，就可以直接通过 <a href="https://learn.microsoft.com/en-us/windows/security/operating-system-security/virus-and-threat-protection/microsoft-defender-smartscreen/">Microsoft Defender SmartScreen</a>，不会触发此弹窗或者误杀；申请门槛也随最高的，需要提交公司执照等有效信息。</li><li><strong>Standard 代码签名</strong>：标准代码签名，价格相对 EV 便宜许多，也支持个人申请，理想的个人推荐；初次运行，会 Microsoft Defender SmartScreen 弹窗提示，当程序被足够多的用户使用后，在 Windows 中积累的信誉足够多，后面也不会弹出此弹窗。</li><li><strong>Open Source 代码签名</strong>：开源作者代码签名，价格最低，目前还能提供的厂商，都是人类文明之光，申请条件为开源的个人开发者。相传，在很多年前，这种证书各大厂商都是免费提供的，但随着 Window 系统 xp -&gt; 7&#x2F;8&#x2F;10&#x2F;11 的变迁，出于系统级的安全设计考虑，诞生出 “User Account Control” 弹窗；以及信任和不信任，还有证书的高昂，现如今基本没有厂商提供了此类证书。</li></ul><p>Code Signing Certificates 的价格 &#x2F; 年；</p><table><thead><tr><th></th><th>Signing in the Cloud</th><th>Signing - code</th><th>Signing - set</th></tr></thead><tbody><tr><td>EV</td><td>€ 379</td><td>€ 329</td><td>€ 359</td></tr><tr><td>Standard</td><td>€ 189</td><td>€ 129</td><td>€ 159</td></tr><tr><td>Open Source</td><td>€ 49</td><td>€ 25</td><td>€ 69</td></tr></tbody></table><p>注：购买实物的时候，还会有约 € 35 的运费 + 23% 的税费，默认是  DHL 快递。</p><h2 id="代码签名证书的购买"><a href="#代码签名证书的购买" class="headerlink" title="代码签名证书的购买"></a>代码签名证书的购买</h2><p>现代 (2024 年) 的签名证书购买 ，分为两类；</p><ul><li><p>**云上: ** 手机上使用 OTP + PC 联网条件</p></li><li><p>**本地: ** 实体的 cryptographic card  + card reader； </p><ul><li><p>一种是大的密码卡片 + 大的读卡器</p></li><li><p>另一种是类似于手机卡卡片 + USB 读卡器</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282203223.png" width="60%"/ loading="lazy"></li></ul></li></ul><p>在线付款有较大概率性会被拒；手机提示信用卡支付成功，但是网站提示交易失败。通常等待三天左右，会自动原始账单返回，但是由于汇率和莫名的手续费，每次失败会损失约 ￥20 。可尝试切换支付方式或信用卡和切换节点。</p><h2 id="手动签名流程"><a href="#手动签名流程" class="headerlink" title="手动签名流程"></a>手动签名流程</h2><p>因我购买的是开源代码签名证书，其支持以下数字签名：</p><ul><li>UNIX&#x2F;Linux 软件</li><li>Firefox 和 Netscape 的扩展</li><li>Java 小程序</li><li>基于JAVA技术的互联网应用</li><li>ActiveX 组件和控件</li><li>二进制文件 (.exe .dll 等)</li></ul><p><strong>步骤如下：</strong></p><ol><li><p>付款成功</p></li><li><p>激活账号</p></li><li><p>验证本人以及开源开发者的身份</p></li><li><p>等待验证通过邮件，和按照邮件提示操作，里面的二维码都是是一次性的，一口气按照操作提示好</p></li><li><p>下载 SimplySign Desktop，，使用签名工具时必须联网验证身份 token；</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202401091823052.png" width="50%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202401091826787.png" width="100%"/ loading="lazy"></li><li><p>使用 signtool + CMD进行签名</p><ol><li><p>打开 SimplySign Desktop 输入验证后，通过调用 Windows 自带的 signtool.exe 工具，来实现对 EXE &#x2F; DLL 的签名；参数如下</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">&gt; signtool.exe  Valid commands:    sign       --  Sign files using an embedded signature.    timestamp  --  Timestamp previously-signed files.    verify     --  Verify embedded or catalog signatures.    catdb      --  Modify a catalog database.    remove     --  Remove embedded signature(s) or reduce the size of an                   embedded signed file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入如下命令签名，盖上自己的章</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202401091833615.png" width="100%"/ loading="lazy"></li></ol></li><li><p>查看 EXE 属性，确认签名成功；最后对 EXE 签名成功，右键属性可查看到。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282222979.jpg" width="80%"/ loading="lazy"></li></ol><h2 id="上架-Microsoft-Store"><a href="#上架-Microsoft-Store" class="headerlink" title="上架 Microsoft Store"></a>上架 Microsoft Store</h2><p>当签上名后，就可上架 Microsoft Store ；也可以上架三方 XX 软件管家&#x2F; 商城，但通常需要提供软著和额外的其它文件。</p><p>这部分下次有空时，另单独写一篇，详细介绍上架流程全程；</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282206422.png" width="100%"/ loading="lazy"><p>下载地址：<a href="https://github.com/XMuli/ThinkyMatePages/releases">GitHub</a> ，这是一个ChatGPT 免费使用的跨平台客户端；更多介绍参见官网 <a href="https://thinkymate.com/">thinkymate.com</a> 。</p><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt;  讲解如何拥有一份私人的代码签名证书，还是 『开源代码签名证书』→ &lt;/p&gt;
&lt;p&gt;&lt;font color=#D0087E size=6 face=&quot;STFangsong&quot;&gt;Open Source Code Signing Certificate 🎉🎉🎉&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;当自己写的软件开发完毕后，若想进行商店软件发布，则下一步需要搞定&lt;strong&gt;『代码签名证书』&lt;/strong&gt;。给你的 EXE 标记一个戳，写上一个被 Microsoft 所认证的签名。&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312282213353.jpg&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    <category term="专栏 - 项目实战开发" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
    
    <category term="学习 - C/C++ 序三 商业 商业" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%B8%89-%E5%95%86%E4%B8%9A-%E5%95%86%E4%B8%9A/"/>
    
    
    <category term="工程经验" scheme="https://ifmet.cn/tags/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="个人能力提升" scheme="https://ifmet.cn/tags/%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>iPhone 13 Pro 更换『移植电芯』和『超容电池』🔋体验</title>
    <link href="https://ifmet.cn/posts/420a6665/"/>
    <id>https://ifmet.cn/posts/420a6665/</id>
    <published>2023-12-28T22:50:13.000Z</published>
    <updated>2023-12-28T22:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 首发买的iPhone 13P （2021.09），随性使用一年出头，容量就暴跌 85%，对比朋友一起买的同款，还是95%。这已经基本得一天两充 &gt;_&lt;，不能忍受。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="考虑换电池"><a href="#考虑换电池" class="headerlink" title="考虑换电池"></a>考虑换电池</h2><ul><li>原厂电池 </li><li>移植电芯</li><li>超容电池</li></ul><p>“原厂电池” 太昂贵了，不如自己拆替换，多的钱买🥩🍖红烧吃吃。另外和两个方案就是“移植电芯”和“三方超容电池”。手机截止今天（2023.12.06），恰好约两年，这两个方法的电池都替换过。长期使用了一年，感觉可以来说下体验.</p><h3 id="Ⅰ-方案一"><a href="#Ⅰ-方案一" class="headerlink" title="Ⅰ 方案一"></a>Ⅰ 方案一</h3><p>开始换了第一块移植电芯的电池（2023.01），此时还市面上还没有超容电池量产。剪断旧电池的开排线版寄给店家，帮电焊后再寄回，自己换。电池费用 120 &#x3D; 电芯 70 + 手工费50，完美。刚替换以后确实超级能用，体验爽歪歪。开始有慢慢上涨回95%，今年11月后来又掉到84%，就又准备一块了。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292031006.jpg" width="100%"/ loading="lazy"><p><strong>优点：</strong> ❶能显示电池容量❷原装苹果排线版，更安全❸理论上充电电流对电芯的最完美❹超便宜价格</p><p><strong>缺点：</strong> ❶排线版已有500多次电池循环，无法清零❷苹果的保护机制，充电次数超过500&#x2F;1000次，会有会有10%容量充不了，原生保修的电芯也一样，属无解。❸有替换技巧，电池容量才能慢慢上涨❹动手能力</p><br><h3 id="Ⅱ-方案二"><a href="#Ⅱ-方案二" class="headerlink" title="Ⅱ 方案二"></a>Ⅱ 方案二</h3><p>这次换了一块超容电芯3480毫安，有蹲到前不久的量产出来了（2023.11）。电池费用220，已经替换上使用20天，还顺便清了灰；拍照给店家得老师傅也说我整的挺干净得🎉；目前使用嘎嘎爽，下班回家还有60-70%⚡。后续使用几个月后，有空再来更新结果</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292015157.jpg" width="100%"/ loading="lazy"><p><strong>优点：</strong> ❶大容量100+%的电池，排线版0循环❷价格便宜</p><p><strong>缺点：</strong> ❶有弹窗，约15天后永久消失❷无法显示电池容量❸自己动手</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​两次自己换电池都很满意的，均一把换成功，DIY 的拆开机快乐。</p><p>​电池这就一个消耗品，随心所欲的用，购机至今有十分之二的时间会用到自动关机，再充电，真比较伤电池，但这种时刻不考虑保养，用起来也是爽快🍋🍃。一年换一块，也嘎嘎香。</p><h2 id="危险-Note"><a href="#危险-Note" class="headerlink" title="危险 Note"></a>危险 Note</h2><p>先写这么多，一些注意点晚点更新</p><p>原厂电池，504次循环容量就到 86%，<del>伤电池的用法已经示范过</del>；拆旧电池排线版，使用绝缘的✂，且电池用光再拆机，若如我这样大力掰弯，<del>心急了。</del>，有大概率见到爆炸🧨，<strong>注意安全；</strong></p><p> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292015011.png" width="40%"/ loading="lazy">  <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/202312292015992.jpg" width="58%"/ loading="lazy"></p><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 首发买的iPhone 13P （2021.09），随性使用一年出头，容量就暴跌 85%，对比朋友一起买的同款，还是95%。这已经基本得一天两充 &amp;gt;_&amp;lt;，不能忍受。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="生活 - 闲暇的趣闻" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E9%97%B2%E6%9A%87%E7%9A%84%E8%B6%A3%E9%97%BB/"/>
    
    
    <category term="工程经验" scheme="https://ifmet.cn/tags/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="偶然乐趣" scheme="https://ifmet.cn/tags/%E5%81%B6%E7%84%B6%E4%B9%90%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>VS2022 And QtCreator10 调试 Qt 源码教程</title>
    <link href="https://ifmet.cn/posts/80ecb9a8/"/>
    <id>https://ifmet.cn/posts/80ecb9a8/</id>
    <published>2023-07-01T16:02:28.000Z</published>
    <updated>2023-07-01T16:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong> 记录使用 Visual Studo 2022 和 QtCreator10 调试 Qt 5.15 源码和 加载 .pdb 的方法。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p><strong>源码</strong>：*.h  *.cpp </p><p><strong>符号调试包</strong>：*.pdb  (属 Windows 专有)</p><p><strong>动态链接库：</strong> *.dll</p><p><strong>静态链接库：</strong> *.lib  (通常是前者，也可以是 .dll 的符号信息，编译时刻使用)</p><p>your.exe 可以进行单步调试  &#x3D;&#x3D;  your源码  +  your.pdb + your.dll + microsoft.pdb + microsoft.dll + 这些文件路径全部设置正确</p></blockquote><br><h2 id="IDE-调试-Qt-源码"><a href="#IDE-调试-Qt-源码" class="headerlink" title="IDE 调试 Qt 源码"></a>IDE 调试 Qt 源码</h2><p>以下两个 IDE 均使用 ”MSVC 2022 + Qt 5.15.2” 来编译项目作为示范，且生成的 x86 的 Debug 模式的 your.exe。</p><br><h3 id="Visual-Studio-2022"><a href="#Visual-Studio-2022" class="headerlink" title="Visual Studio 2022"></a>Visual Studio 2022</h3><ol><li><p>Visual Studio 2022  依次打开 菜单栏的【Tools】【Options】，进入【Debugging】【Symbols】添加 Qt 的符号调试包路径</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701145622.png" width="80%"/ loading="lazy"></li><li><p>右键打开解决方案的属性【Solution】【Properties】，【Debug Source Files】添加源码路径</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701143001.png" width="80%"/ loading="lazy"></li><li><p>编译工程，模式为 Debug、Win32，设置断点【F9】后，开启运行调试【F5】，卡住断点，再怕【F11】 进入任何一个 Qt 源码的函数调试， QWidget::show() 函数为例</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/5.gif" width="100%"/ loading="lazy"></li><li><p>若是每次 【F9】调试加载很慢，是因为每次从微软服务器拉取这些文件到本地比较耗时。也在步骤1中，和我一样取消【Microsoft Sysbol Servers】前面的勾，调试很快且顺滑，且不影响正常的软件调试功能。</p></li></ol><br><h3 id="Qt-Creator-10-0-1"><a href="#Qt-Creator-10-0-1" class="headerlink" title="Qt Creator 10.0.1"></a>Qt Creator 10.0.1</h3><ol><li><p>Qt Creator  10.0.1 依次打开 菜单栏的【Edit】【Preferences】，进入【Debugger】【Source Path Mapping】【Add Qt sources…】添加 Qt 的源码路径，此处是调试需要</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701144948.png" width="80%"/ loading="lazy"></li><li><p>【Debugger】【CDB Paths】的 “Symbol Paths” ，”Source Paths” 添加 MSVC 的符号调试包的路径和源码路径。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701153918.png" width="80%"/ loading="lazy"></li><li><p>【Enviroment】【Locator】【Custom】添加 Qt 的源码路径和自定义的文件路径，作用是便于快捷键直接定位具体文件。注意此处路径分隔符号是 <code>/</code></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/20230701151711.png" width="80%"/ loading="lazy"><p>快捷键【Ctrl + K】快速定位左下角，然后搜索 Qt 源码的文件名以及自定义项目的文件名称，迅速切换，体验极佳</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/6.gif" width="80%"/ loading="lazy"></li><li><p>编译工程，模式为 Debug、32bit，设置断点【F9】后，开启运行调试【F5】，卡住断点，再怕【F11】 进入任何一个 Qt 源码的函数调试， QWidget::show() 函数为例</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2023/7.gif" width="80%"/ loading="lazy"></li></ol><br><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><p>若用 VS2022 &#x2F; QtCreator 10.0.1 单步调试 Qt 源码失败，排查原因</p><ol><li>安装 Qt 时候亦下载了 Qt 源码和 符号调试包</li><li>your.exe + your.dll 生成到你设置的预期的路径，且放在同一级</li><li>如 Qt5Gui<font color=#FF0000>d</font> .dll (Debug 模式下 dll 名称含 d)</li><li>加载了 pdb (确定版本没下错)</li><li>解决方案加载了 src源码</li><li>加载了符号调试包路径</li><li>编译的 your.exe 是对应 MSVC、 x86 且是 debug 模式</li><li>若是 x64 或者其它 Kit 调试原理相同</li></ol><br><h2 id="姊妹篇"><a href="#姊妹篇" class="headerlink" title="姊妹篇"></a>姊妹篇</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/120339797">VS2017 调试 Qt 源码，安装 PDB</a></li><li><a href="https://xmuli.blog.csdn.net/article/details/116244865">VS2019 调试 Qt5 时 QString 显示为内存地址而非字符串</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/131491715">VS2022 And QtCreator10调试Qt源码教程</a></li></ul><p>若是 IDE 调试时发现没有 Qt 的符号调试包，教程可参考姊妹篇一；以及学会如何查看 对应模块是否加载</p><br><h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> </p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt; 记录使用 Visual Studo 2022 和 QtCreator10 调试 Qt 5.15 源码和 加载 .pdb 的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
    <category term="Visual Studio" scheme="https://ifmet.cn/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>基于 QT 开发的 FLIPPED 一款简易且漂亮的跨平台截图软件</title>
    <link href="https://ifmet.cn/posts/bc74ebe4/"/>
    <id>https://ifmet.cn/posts/bc74ebe4/</id>
    <published>2023-03-22T00:42:13.000Z</published>
    <updated>2024-02-29T20:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 新开发的一款跨平台的截图贴图的软件作品， <strong>FLIPPED</strong>：Simple and beautiful cross-platform screenshot software。</p><iframe width="760" height="427" src="//player.bilibili.com/player.html?aid=352984575&bvid=BV1rX4y1D7EZ&cid=1037119662&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="FLIPPED"><a href="#FLIPPED" class="headerlink" title="FLIPPED"></a>FLIPPED</h2><div align="center">  <p>      <h1>      <a href="https://github.com/XMuli/Flipped">          <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121608051.svg"  alt="FLIPPED" / loading="lazy">      </a>      <br/>      FLIPPED    </h1>    <br/>    <h4>Simple and beautiful cross-platform screenshot software.</h4>  </p></div><br><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/135487951">分享如何拥有一份私人的『开源代码签名证书』</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136334975">Sunny截图上架Microsoft Store及Linux商店流程的指北</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/136373241">嘿嘿！开发了一款 Sunny 截图 &amp; 钉图，亦支持“屏幕识图”和“OCR”的软件</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/130053230">基于 QT 开发 FLIPPED ：简易且漂亮的跨平台截图贴图软件</a></li><li>更多教程 → <a href="https://github.com/XMuli/QtExamples">QtExamples</a></li></ul><br><h2 id="运行预览"><a href="#运行预览" class="headerlink" title="运行预览"></a>运行预览</h2><h3 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h3><ul><li>[P1] <a href="https://www.bilibili.com/video/BV1rX4y1D7EZ?p=1">FLIPPED-MACOS 运行演示</a></li><li>[P2] <a href="https://www.bilibili.com/video/BV1rX4y1D7EZ?p=2">FLIPPED-WINDOWS 运行演示</a></li><li>[P3] <a href="https://www.bilibili.com/video/BV1rX4y1D7EZ?p=3">FLIPPED-LINUX 运行演示</a></li></ul><br><h3 id="截图演示"><a href="#截图演示" class="headerlink" title="截图演示"></a>截图演示</h3><p><strong>MACOS</strong></p><img src="C:\Users\XMuli\Desktop\202303121457071.jpg" width="100%"/ loading="lazy"><p><strong>WINDOWS</strong></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121616530.jpg" width="100%"/ loading="lazy"><p><strong>LINUX</strong></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121447431.jpg" width="100%"/ loading="lazy"><br><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>贴图（钉图）</li><li>多屏截图，延时截图，自定义截图</li><li>智能识别窗口矩形（Windows &amp; Linux）</li><li>矩形、椭圆、箭头、画笔、马赛克、文本、序号</li><li>撤销、重做（多级）、保存、取消、拷贝到剪切板</li><li>截图框样式三套，且主题色提供自定义；屏幕十字线样式自定义</li><li>国际化：英文、简体中文、繁体中文；字体和字号自定义</li></ul><br><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>按键</th><th>描述</th><th>模式</th></tr></thead><tbody><tr><td><kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd> ( <kbd>A</kbd>, <kbd>S</kbd>, <kbd>W</kbd>, <kbd>D</kbd> )</td><td>移动选中框位置 1 像素</td><td>局部</td></tr><tr><td><kbd>Ctrl</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>扩展选中框尺寸 1 像素</td><td>局部</td></tr><tr><td><kbd>Alt</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>收缩选中框尺寸 1 像素</td><td>局部</td></tr><tr><td><kbd>Shift</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>移动选中框位置 10 像素</td><td>局部</td></tr><tr><td><kbd>Shift</kbd> + <kbd>Ctrl</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>扩展选中框尺寸 10 像素</td><td>局部</td></tr><tr><td><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>←</kbd>, <kbd>↓</kbd>, <kbd>↑</kbd>, <kbd>→</kbd></td><td>收缩选中框尺寸 01 像素</td><td>局部</td></tr><tr><td><kbd>Shift</kbd> + <kbd>F4</kbd></td><td>快速保存截图</td><td>局部</td></tr><tr><td><kbd>Esc</kbd></td><td>退出</td><td>局部</td></tr><tr><td></td><td></td><td></td></tr><tr><td><kbd>F6</kbd></td><td>窗口智能截图</td><td>全局</td></tr><tr><td><kbd>F7</kbd></td><td>延时截图</td><td>全局</td></tr><tr><td><kbd>F8</kbd></td><td>全屏截图</td><td>全局</td></tr></tbody></table><br><h2 id="架构思路"><a href="#架构思路" class="headerlink" title="架构思路"></a>架构思路</h2><p>技术架构属初看觉着很简单，耗时几天就能写一个 Demo 级的截图，如很早写的 <a href="https://github.com/XMuli/ShotX">ShotX</a>。</p><p>但后来心心念念，准备正式写一个具有高级&#x2F;商业的软件时候，就属于有点规模。其属细节点超级多；</p><br><p><strong>思路：</strong></p><ol><li>创建一个 QWidget 窗口，去掉标题栏后，全屏且置顶</li><li>捕获此刻多屏幕状态保存为 QPixamp，然后绘画在 QWidget 最底层</li><li>再绘画一层透明黑色作为遮罩</li><li>将 QWidget 放于虚拟桌面的左上角；后面注意相对坐标和绝对坐标的转换</li><li>判断当前所处模式：Wait &#x2F; Select &#x2F; Move &#x2F;  Draw &#x2F; Stretch，标记</li><li>根据模式标记，对鼠标的  Press &#x2F; Move &#x2F; Release 事件进行对应的操作；重点是鼠标放下和松开时的 QPoint <ul><li>捕获模式：智能窗口 &#x2F; 全屏截图 &#x2F; 延时截图 &#x2F; 自定义截图 等</li><li>绘画模式则细分：一级绘画栏和二级绘画栏（愈加精确的参数）</li><li>拉伸可为：拉伸已绘图形 &#x2F; 选中框 &#x2F; … ，操作是可见区域的任意一个图案</li><li>移动同上类似</li></ul></li><li>重复迭代步骤 6，进行标注等功能</li><li>导出图片保存到本机路径 &#x2F; 剪切板。</li><li>亦可直接贴图（钉住）在屏幕上，然后进行缩放和透明度等操作，作为写作时的参照。</li></ol><br><h2 id="细节打磨"><a href="#细节打磨" class="headerlink" title="细节打磨"></a>细节打磨</h2><p>写的时候，保证开发过程的多平台编译，push 代码时触发构建 CI&#x2F;CD， 及生成对应平台的包便于安装。</p><p>截图的工作量、尤其是细节的实现是挺多的。需要花时间来打磨产品和优化细节，让它成为美观又好用的一款软件，再造一个极佳的轮子。</p><p>绝知此事要躬行；列举开发过程中遇到的具体困境，以供后来者参考。</p><br><h3 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h3><ol><li>FLIPPED 开发在不同系统上、使用不同的 Kit Tools 上面均不会乱码？</li><li>项目使用第三方开源库时，选择 <code>git submodule</code> 还 <code>git treemodule</code> 命令呢？</li><li>选用何种 LOG 会性能和成本最佳？便于后面定位和分析</li><li>CMake 管理跨平台项目，生各平台的 IDE 的解决方案</li><li>Window 上自带一些基础宏的数据类型含义？</li><li>项目运行直接显示后，按键盘无响应的定位和解决。</li><li>Qt 控件显示的方块 ■◆ 乱码？</li><li>Linux 如何构建打包为 .deb 文件？</li><li>Window 如何构建一件安装的 .exe? 书写构建的脚本？</li><li>———————————– 更多进阶细节问题———————————-</li><li>如何实现一个完美的无边框窗口（跨平台）？</li><li>如何实现一个完美的透明磨砂效果（跨平台）？</li><li>Windows 和 Linux 支持一次截多个屏幕，MacOS 没有对应接口，如何实现呢？</li><li>如何书写 .yml 的脚本，构建私人的 CI&#x2F;CD 呢？</li><li>Window &#x2F; Linux &#x2F; MacOS 下如何获取所有窗口的位置和尺寸，以及其它更多信息呢？</li><li>如何实现国际化 I18N？尤其是未使用 Qt Designer  创建 .ui 文件，遇到无 <code>ui-&gt;retranslateUi(this)</code> 函数？</li><li>如何解决快捷键 和 Action 调用不同截图？</li><li>如何确保 MacOS 上的效果和 Window上面保持外观的一致？</li><li>如何解决使用 ESC 取消截图后的内存泄露问题？QPointer 、智能指针、还是单例？</li><li>对于使用单例模式不止一处时，可采用奇异玄幻模板？</li><li>代码如何更好的解耦和是适当位置，采用适当的设计模式？</li><li>如何绘制自己的独有的控件？</li><li>如何迭代中进行重构和封装？每次都因为什么？</li><li>…</li></ol><br><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343">愿编程不再乱码(含Qt)-根因深究</a></p></li><li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343/article/details/123453541">Git Submodule 基本用法</a></p></li><li><p>『解决』从 LOG 分析调研，采用 Spdlog &#x2F; QDebug，以及对此两套的宏封装</p><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/123457938">Log：日志选型调研『一』</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/123488323">Log：日志之 Spdlog 极简用法示范『二』</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/123489094">Log：日志之 Spdlog 核心构成『三』</a></li></ul></li><li><p>『解决』有很多，后抽空整理更多</p><ol><li><a href="https://blog.csdn.net/qq_33154343/article/details/125932219">CMake 设置 Target 输出目录和后缀名</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/125928773">CMake 之 BUILD_SHARED_LIBS 和 CMAKE_BUILD_TYPE 用法教程</a></li></ol></li><li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343/article/details/125775718">LPSTR&#x2F;LPCSTR&#x2F;LPTSTR&#x2F;HWND&#x2F;HANDLE&#x2F;HMODULE&#x2F;HINSTANCE 等含义和区别</a></p></li><li><p>『解决』 参考</p><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/124639169">Qt 新弹窗不响应键盘按键，难道也是无焦点？</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/125879693">Windows 编程之 WINUSERAPI 和 WINAPI 区别</a></li></ul></li><li><p>『解决』还是 Qt Assistant 解围粗心， <a href="https://blog.csdn.net/qq_33154343/article/details/125775732">创建 QKeySequenceEdit() 后，显示方块■◆乱码</a></p></li><li><p>『解决』 <a href="https://blog.csdn.net/qq_33154343/article/details/123778207">Linux 中用 dh_make 将 Qt + CMake 项目打包为 deb 文件</a></p></li><li><p>『解决』构建的自动打包</p> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303130023285.png" width="70%"/ loading="lazy"></li><li><p>『解决』未完待续。。。</p></li></ul><br><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li><p>Qt &gt;&#x3D; 5.15.2</p></li><li><p>CMake &gt;&#x3D; 3.16</p></li><li><p>MSVC &gt;&#x3D; 2019 | MinGW &gt;&#x3D;  8.1.0 | GCC &gt;&#x3D; 9.4 | Clang &gt;&#x3D; 12.0</p><p>  备注: 这是已经成功编译的一些版本，在更低的版本未经过测试。</p></li></ul><br><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p><strong>工具链:</strong> Windows 10 &amp; Qt 5.15.2 &amp; CMake 3.24.1 &amp; MSVC 2019 ( or MinGW 8.1.0)</p></li><li><p><strong>编译步骤:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ******************** MSVC 2019 ********************</span><span class="token comment">#『Step1』</span><span class="token comment"># x86:</span><span class="token comment"># 添加 "C:\Qt\5.15.2\msvc2019\bin" 到 path 后，终端执行 echo %PATH% 使其立即生效</span><span class="token string">"C:\Program Files (x86)\Microsoft Visual Studio<span class="token entity" title="\201">\201</span>9\Professional\VC\Auxiliary\Build<span class="token entity" title="\v">\v</span>cvarsall.bat"</span> x86cmake <span class="token parameter variable">-G</span> <span class="token string">"Visual Studio 16 2019"</span> <span class="token parameter variable">-A</span> Win32 <span class="token punctuation">..</span>devenv Flipped.sln /Build <span class="token string">"Release|Win32"</span><span class="token comment"># x64:</span><span class="token comment"># 添加 "C:\Qt\5.15.2\msvc2019_64\bin" 到 path 后，终端执行 echo %PATH% 使其立即生效</span><span class="token string">"C:\Program Files (x86)\Microsoft Visual Studio<span class="token entity" title="\201">\201</span>9\Professional\VC\Auxiliary\Build<span class="token entity" title="\v">\v</span>cvarsall.bat"</span> x64cmake <span class="token parameter variable">-G</span> <span class="token string">"Visual Studio 16 2019"</span> <span class="token parameter variable">-A</span> x64 <span class="token punctuation">..</span>devenv Flipped.sln /Build <span class="token string">"Release|x64"</span><span class="token comment">#『Step2』</span>Visual Studio <span class="token number">2019</span> <span class="token function">open</span> <span class="token variable"><span class="token variable">`</span>Flipped.sln<span class="token variable">`</span></span><span class="token comment">#『Step3』</span>windeployqt  bin/Flipped.exe --no-translations<span class="token comment"># ******************** MinGW 8.1.0 ********************</span>QtCreator opens the <span class="token variable"><span class="token variable">`</span>CMakeLists.txt<span class="token variable">`</span></span> <span class="token function">file</span> <span class="token keyword">in</span> the root directory of the <span class="token builtin class-name">source</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><h3 id="MacOS-x2F-Linux"><a href="#MacOS-x2F-Linux" class="headerlink" title="MacOS &#x2F; Linux"></a>MacOS &#x2F; Linux</h3><ul><li><p><strong>工具链:</strong> </p><ul><li><strong>MacOS:</strong> MacOS 10.15 &amp; Qt 5.15.2 &amp; CMake 3.24 &amp; Clang 12.0</li><li><strong>Linux:</strong> Ubuntu 20.04 &amp; Qt 5.15.2 &amp; CMake 3.24 &amp; GCC 9.4</li></ul></li><li><p><strong>编译步骤:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/XMuli/Flipped.git<span class="token builtin class-name">cd</span> Flipped<span class="token function">mkdir</span> build <span class="token operator">&amp;</span> <span class="token builtin class-name">cd</span> buildcmake <span class="token punctuation">..</span><span class="token function">make</span> <span class="token parameter variable">-j16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>构建各个平台后的包，附上另外一些实际运行图。<strong>Other</strong> 更多截图效果可 → 在此预览</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121524707.jpg" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121441470.jpg" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121623966.png" width="100%"/ loading="lazy"><br><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121524281.jpg" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121447407.jpg" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121621557.png" width="100%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121621671.png" width="100%"/ loading="lazy"><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081932040.png" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304082010242.png" width="50%"/ loading="lazy"></p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081931040.png" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304082010530.png" width="50%"/ loading="lazy"></p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081930048.png" width="50%"/ loading="lazy"><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202304081932046.png" width="50%"/ loading="lazy"></p><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121515818.jpg" width="30%"/ loading="lazy"> <img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303121522838.jpg" width="30%"/ loading="lazy"></p><br><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><table><thead><tr><th><a href="https://github.com/XMuli"><img src="https://img.shields.io/badge/GitHub-XMuli-brightgreen" alt="alt text" loading="lazy"></a> : 我的主页</th><th><a href="https://ifmet.cn/"><img src="https://img.shields.io/badge/Blog-%E5%81%95%E8%87%A7%E7%9A%84%E5%B0%8F%E7%AB%99-ff69b4" alt="alt text" loading="lazy"></a> : 好奇我的小窝</th></tr></thead><tbody><tr><td><a href="https://sighttp.qq.com/authd?IDKEY=31f3ef7312b39e2c8dc822ae2f4c3b3118e1a6f31cc83373"><img src="https://img.shields.io/badge/QQ-XMuli-brightgreen" alt="alt text" loading="lazy"></a> : 直接和我聊天~</td><td><a href="https://blog.csdn.net/qq_33154343"><img src="https://img.shields.io/badge/Blog-%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F-ff69b4" alt="alt text" loading="lazy"></a> ：浏览量 100W+</td></tr></tbody></table><br><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>若是帮助到了你，或者觉得有用，<font color=#FE7207  size=4 face="幼圆">可以点击该项目的的 <font color=#D0087E size=4 face="幼圆"><strong>⭐Star</strong> </font>和<font color=#D0087E size=4 face="幼圆"><strong>🍴 Fork</strong></font> 的两个图标，方便抬手之间，表示点个赞，手有余香，</font>其次才是一份冰的肥宅快乐水。 → <a href="https://github.com/XMuli/FlippedPackage">project →  flipped</a></p><br><details>    <summary> <b>当然也可以赠与一杯冰阔落[捐赠/打赏  ← 点击展开二维码]</b></summary>  <p> - 若是此项目帮助到了你，或者觉得有用，或是想帮助此项目的发展，你也能够邀请我喝一杯杯肥仔快乐水。 - </p>  <pre><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202302282339037.png" width="80%"/ loading="lazy"></pre></details><br><h2 id="反馈-amp-贡献"><a href="#反馈-amp-贡献" class="headerlink" title="反馈 &amp; 贡献"></a>反馈 &amp; 贡献</h2><p>非常欢迎你的加入！对于此软件有任何缺陷、建议、功能想法、都可 <a href="https://github.com/XMuli/FlippedPackage/issues">提一个 Issue</a> ；或者帮助此项目的完善，提交一个 Pull Request。请遵循 <a href="http://contributor-covenant.org/version/1/3/0/">Contributor Covenant</a> 行为规范。</p><br><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>→ <font color=#D0087E face="幼圆"> **离线安装包下载 <a href="https://github.com/XMuli/FlippedPackage/releases">Releases</a> ** </font></p><p>→ <font color=#D0087E face="幼圆"> <strong>反馈 BUG&#x2F;SUGGEST，用户社区等，和最新版本安装包获取，在QQ群:<a href="https://qm.qq.com/cgi-bin/qm/qr?k=jsD03QzMohGZm0TqYAFh3BvKOpCGlTcT&jump_from=webapi&authKey=DMUwiCQ6ta95PoH8JmtZ+Jz9y7Ozg3yinEsxmm92rNXZRVeMPD7NRgjU+dmUI8Xu">418103279</a></strong> </font></p><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a>     欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录</p><p><a href="https://github.com/XMuli/ExCMake">ExCMake</a>           欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>CMake</code> 学习，附学习由浅入深的目录</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 新开发的一款跨平台的截图贴图的软件作品， &lt;strong&gt;FLIPPED&lt;/strong&gt;：Simple and beautiful cross-platform screenshot software。&lt;/p&gt;
&lt;iframe width=&quot;760&quot; height=&quot;427&quot; src=&quot;//player.bilibili.com/player.html?aid=352984575&amp;bvid=BV1rX4y1D7EZ&amp;cid=1037119662&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

&lt;br&gt;</summary>
    
    
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="学习 - C/C++ 序三 商业" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%B8%89-%E5%95%86%E4%B8%9A/"/>
    
    <category term="专栏 - 项目实战开发" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
    <category term="项目作品集合" scheme="https://ifmet.cn/tags/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器 R4A 刷原生 OpenWrt 后的风景</title>
    <link href="https://ifmet.cn/posts/880ce1ac/"/>
    <id>https://ifmet.cn/posts/880ce1ac/</id>
    <published>2023-01-02T17:54:13.000Z</published>
    <updated>2023-01-02T17:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 继上篇 <a href="https://blog.csdn.net/qq_33154343/article/details/128268719">小米AX6S刷OpenWrt和开启OpenClash</a> 后，手痒难耐，决定把小米路由器4A千兆版(R4A)路由器 给刷个原生的 <code>OpenWrt</code>。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021722443.png" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>miwifi_r4a_firmware_72d65_2.28.62.bin    [官方] 可刷机固件，可开启 telnet </p><p>openwrt-22.03.2-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin </p><p>openwrt-22.03.2-ramips-mt7621-xiaomi_mi-router-4a-gigabit-initramfs-kernel.bin</p></blockquote><p>squashfs-sysupgrade.bin 是我们要刷的版本，initramfs-kernel.bin 是类似于重启后就会镜像还原的版本；</p><p>通过 <a href="https://downloads.openwrt.org/releases/22.03.2/targets/ramips/mt7621/">openwrt.org</a> 刷官方原生 最新的 openwrt-22.03 固件；<a href="https://github.com/acecilia/OpenWRTInvasion">OpenWRTInvasion</a>  则利用漏洞进入小米路由器</p><br><p>💻  <code>win10 22H2</code> 📎  <code>小米路由器4A千兆版(R4A) </code> 📎 <code>虚拟机的 Ubuntu 20.04</code></p><br><h2 id="刷成原生-OpenWrt"><a href="#刷成原生-OpenWrt" class="headerlink" title="刷成原生 OpenWrt"></a>刷成原生 OpenWrt</h2><ol><li><p>先刷为 <code>2.28.62</code> 版本；此为经过验证可以刷机的版本</p></li><li><p>链接路由器，打开 <code>192.168.31.1</code> 登陆后，拷贝出链接的 stok 数，此时标签页不关闭</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021624889.png" width="100%"/ loading="lazy"></li><li><p>主机 Win10 连接路由器 Wifi 后，虚拟机的 Ubuntu 20.04 网络设置为桥接，<code>ifconfig</code> 确保处于同一网段；</p></li><li><p>进入 OpenWRTInvasion 文件夹；作用为开启 telnet</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txtpython3 remote_command_execution_vulnerability.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显示 <code>“done! Now you can connect to the router using several options: (user: root, password: root)”</code> 属成功，才可进行下一步</p></li><li><p>固件可通过提前上传到 <code>/tmp</code> 下，依次操作后刷机则成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token number">192.168</span>.31.1    （user: root, password: root）<span class="token builtin class-name">cd</span> /tmpmtd <span class="token parameter variable">-e</span> OS1 <span class="token parameter variable">-r</span> <span class="token function">write</span> openwrt-22.03.2-ramips-mt7621-xiaomi_mi-router-4a-gigabit-initramfs-kernel.bin OS1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>刚刷好没有 WIFI 的，默认 IP 192.168.1.1， 账号 root，密码无；网线可进后台。</p></li><li><p>也可以先刷 initramfs-kernel.bin 后；</p></li></ol><br><p><strong>注：</strong></p><ul><li><p><strong>打开 <code>192.168.31.1</code> 的标签页也使用虚拟机 ubuntu 的浏览器打开</strong>获取 stok 数；之前 Win10 浏览器打开，执行命令，总提示 <code>Warning: the process has finished, but seems like ssh connection to the router is not working as expected.</code>；屡次  telnet 进不去；浪费光阴</p></li><li><p>OpenWRTInvasion，该脚本只能运行在 Linux、Mac 上</p></li><li><p>需要先刷为支持的版本，如 <code>2.28.62</code></p></li></ul><br><h2 id="原生-OpenWrt-基础操作"><a href="#原生-OpenWrt-基础操作" class="headerlink" title="原生 OpenWrt 基础操作"></a>原生 OpenWrt 基础操作</h2><h3 id="开启-WiFi"><a href="#开启-WiFi" class="headerlink" title="开启 WiFi"></a>开启 WiFi</h3><p>原生默认没开启 WiFi；还以为没成功，氪！</p><p>WIFI最好通过图形界面（LuCI）开启，相关设置在 Network（网络）&gt; Wireless（无线）里头。</p><p>选择启用之后，记得进入 Edit（编辑）&gt; Interface Configuration（接口配置）&gt; Wireless Security（无线安全）来设置密码。</p><p>WIFI名在 Interface Configuration（接口配置）&gt; General Setup（常规设置）&gt; ESSID 修改。</p><br><h3 id="opkg-换源"><a href="#opkg-换源" class="headerlink" title="opkg 换源"></a>opkg 换源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/downloads.openwrt.org/mirrors.ustc.edu.cn\/openwrt/g'</span> /etc/opkg/distfeeds.confopkg updateopkg instll libustream-openssl ca-bundle ca-certificates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参考 <a href="https://mirrors.ustc.edu.cn/help/openwrt.html">https://mirrors.ustc.edu.cn/help/openwrt.html</a></strong></p><br><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p>在 “system-Software” 搜索 <code>luci-i18n-base-zh-cn</code> 之前，先Update 下方可搜寻到</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021657195.png" width="100%"/ loading="lazy"><br><h3 id="OpenClash-插件"><a href="#OpenClash-插件" class="headerlink" title="OpenClash 插件"></a>OpenClash 插件</h3><p>→ <a href="https://github.com/vernesong/OpenClash/releases">release</a> 下载 <code>luci-app-openclash_0.45.78-beta_all.ipk</code>后 ，执行 <code> opkg install /tmp/**.ipk</code>  安装；遇最后一行提示 <code> * opkg_install_cmd: Cannot install package luci-app-openclash.</code> 则需要按照 wiki 先安装所必须的依赖。</p><br><h4 id="8M-之殇，终结"><a href="#8M-之殇，终结" class="headerlink" title="8M 之殇，终结"></a>8M 之殇，终结</h4><p><font color=#ff0000>然，被提示拿捏的死死的；刷小米固件，会想起某帖说的 8M，也明白了；暴风哭泣。不说了，快跑，撤退~~</font></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021803480.png" width="100%"/ loading="lazy"><br><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://github.com/acecilia/OpenWRTInvasion">OpenWRTInvasion</a></p></li><li><p><a href="https://openwrt.org/inbox/toh/xiaomi/xiaomi_mi_router_4a_gigabit_edition">https://openwrt.org/inbox/toh/xiaomi/xiaomi_mi_router_4a_gigabit_edition</a> 的 “Notes on firmware exploit procedure” 部分</p></li><li><p><a href="https://oscarcx.com/tech/openwrt-tutorial.html#%E5%BC%80%E5%90%AFWIFI">Openwrt从入门到放弃</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 继上篇 &lt;a href=&quot;https://blog.csdn.net/qq_33154343/article/details/128268719&quot;&gt;小米AX6S刷OpenWrt和开启OpenClash&lt;/a&gt; 后，手痒难耐，决定把小米路由器4A千兆版(R4A)路由器 给刷个原生的 &lt;code&gt;OpenWrt&lt;/code&gt;。&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021722443.png&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - 代理" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="OpenWrt" scheme="https://ifmet.cn/tags/OpenWrt/"/>
    
    <category term="路由器" scheme="https://ifmet.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="网络" scheme="https://ifmet.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 实现智能指针：shared_ptr 和 unique_ptr</title>
    <link href="https://ifmet.cn/posts/9ec225d6/"/>
    <id>https://ifmet.cn/posts/9ec225d6/</id>
    <published>2022-12-19T02:04:13.000Z</published>
    <updated>2022-12-19T02:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> C++11 智能指针的深入分析，和动手实现简版的智能指针 <code>std::shared_ptr</code> 、<code>std::unique_ptr</code></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实现原理提前需要理解 <strong>特殊成员函数</strong>、<code>std::exchange() C++14</code>、<code>std::swap()</code>、 <code>std::move()</code>、<code>constexpr</code>、<code>explicit</code>、<code>noexcept</code> 等，若是遗忘可参考此文</p><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/128367884">C++ 类的六个特殊成员函数</a></li><li><a href="">C++ 11&#x2F;14&#x2F;17 的新特性  占位</a></li></ul><br><p>最后，Demo 实现或许不够十分完美和严谨，但对于其理解智能指针的原理和面试手写实现时候，足够。若有纰漏，请指正。</p><br><h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p><code>shared_ptr</code> 的原理： 通过<strong>引用计数</strong>的方式来实现多个 shared_ptr 对象之间<strong>共享</strong>资源。</p></li><li><p>通过引用计数和模板来实现 shared_ptr；构造函数定义的时候，要初始化其指针、引用计数、和 mutex</p></li><li><p>“copy assignment constructor” 除了校验是否相等、是否为空的时候、拷贝时要先释放旧资源，旧的引用计数 -1，赋值后再指向对新的资源的引用计数 +1</p></li><li><p>释放资源时，要<strong>先校验是否存在，及计数为 0</strong> 才释放；</p></li></ul><br><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>　　💻  <code>win10 22H2</code>  📎 <code>Visual Studio 2019</code> 📎 <code>C++11</code> 见 <a href="https://github.com/XMuli/QtExamples/blob/master/Studio/Studio/SharedPtr.h">SharedPtr.h</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/******************************************************************* * Copyright (c) 2022~-023 XMuli  All rights reserved. * Description: C++ 实现一个核心的 shared_ptr 智能指针模板类 ******************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">SharedPtr</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_refCount</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_pMutex</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">SharedPtr</span><span class="token punctuation">(</span>T<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_refCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_pMutex</span><span class="token punctuation">(</span><span class="token keyword">new</span> mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>  <span class="token comment">// 其 _refCount 可以通过另外一个指针来修改，指向的是同一个地址</span>        <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span>        <span class="token punctuation">,</span> <span class="token function">_refCount</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_refCount<span class="token punctuation">)</span>        <span class="token punctuation">,</span> <span class="token function">_pMutex</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_pMutex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">addRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> SharedPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>obj <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr <span class="token operator">!=</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 先释放旧的资源</span>                _ptr <span class="token operator">=</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>                _refCount <span class="token operator">=</span> obj<span class="token punctuation">.</span>_refCount<span class="token punctuation">;</span>                _pMutex <span class="token operator">=</span> obj<span class="token punctuation">.</span>_pMutex<span class="token punctuation">;</span>                <span class="token function">addRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 再技计数 +1</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//SharedPtr(SharedPtr&lt;T>&amp;&amp; obj) noexcept;</span>    <span class="token comment">//SharedPtr&lt;T>&amp; operator=(SharedPtr&lt;T>&amp;&amp; obj)noexcept;</span>    <span class="token operator">~</span><span class="token function">SharedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>_refCount<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">addRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"addRefCount"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        _pMutex<span class="token operator">-></span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span><span class="token operator">*</span>_refCount<span class="token punctuation">;</span>        _pMutex<span class="token operator">-></span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"release"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">bool</span> bDelMutex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        _pMutex<span class="token operator">-></span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span><span class="token operator">*</span>_refCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 先校验是否存在，及计数为 0 才释放</span>            <span class="token keyword">delete</span> _ptr<span class="token punctuation">;</span>            <span class="token keyword">delete</span> _refCount<span class="token punctuation">;</span>            _ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            _refCount <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            bDelMutex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        _pMutex<span class="token operator">-></span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bDelMutex<span class="token punctuation">)</span>            <span class="token keyword">delete</span> _pMutex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>                  <span class="token comment">// 需在构造函数中初始化</span>    T<span class="token operator">*</span> _ptr<span class="token punctuation">;</span>              <span class="token comment">// 指向管理资源的指针</span>    <span class="token keyword">int</span><span class="token operator">*</span> _refCount<span class="token punctuation">;</span>       <span class="token comment">// 引用计数</span>    mutex<span class="token operator">*</span> _pMutex<span class="token punctuation">;</span>       <span class="token comment">// 计数自增非原子操作，加锁解决多线程</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp2</span><span class="token punctuation">(</span>sp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>sp2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                                                                <span class="token comment">//sp1 与 sp2 在管理这部分资源，引用计数为 2</span>    cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//2 20</span>    cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//2 20</span>                                                                      SharedPtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  sp2 <span class="token operator">=</span> sp3<span class="token punctuation">;</span>                                            <span class="token comment">//sp3 赋值给它，释放管理的旧资源，引用计数-1，   </span>    cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//1 20</span>    cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//2 30</span>    cout <span class="token operator">&lt;&lt;</span> sp3<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//2 30</span>                                                                      sp1 <span class="token operator">=</span> sp3<span class="token punctuation">;</span>                                                        cout <span class="token operator">&lt;&lt;</span> sp1<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//3 30</span>    cout <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//3 30</span>    cout <span class="token operator">&lt;&lt;</span> sp3<span class="token punctuation">.</span><span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//3 30</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*****************************打印结果*******************************no default constructorcopy constructoraddRefCount2  *ptr:202  *ptr:20no default constructorcopy assignment constructorreleaseaddRefCount1  *ptr:202  *ptr:302  *ptr:30copy assignment constructorreleaseaddRefCount3  *ptr:303  *ptr:303  *ptr:30Hello World!destructorreleasedestructorreleasedestructorrelease ******************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>Note:</strong> </p><ul><li><p>mutex 实现了引用计数是线程安全的。但智能指针管理的对象存放在<strong>堆</strong>上，两个线程中同时去访问，会导致线程安全问题。</p></li><li><p>书写测试时，若使用默认构造函数, 成员变量 _ptr、_refCount、_pMutex 在 release() 中容易崩溃；推荐带参的构造函数，完美运行测试</p></li></ul><br><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://juejin.cn/post/7111726931301072910#heading-8">C++ 智能指针与底层实现剖析</a></li><li><a href="https://cloud.tencent.com/developer/article/1688444">面试题：简单实现一个shared_ptr智能指针</a></li><li><a href="https://blog.csdn.net/Z_Stand/article/details/98512756">C++智能指针: shared_ptr 实现详解</a></li></ul><br><h2 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><ul><li><code>unique_ptr</code>的设计思路非常的粗暴：<strong>防拷贝</strong>，也就是<strong>不让拷贝和赋值</strong>。</li><li>unique_ptr <strong>唯一</strong> 拥有其所指对象，同一时刻只能有一个unique_ptr 指向给定对象（通过禁止拷贝语义、只有移动语义来实现</li></ul><br><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>　　💻  <code>win10 22H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++11</code> 见 <a href="https://github.com/XMuli/QtExamples/blob/master/Studio/Studio/UniquePtr.h">UniquePtr.h</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/******************************************************************* * Copyright (c) 2022~2023 XMuli  All rights reserved. * Description: C++ 实现一个核心的 unique_ptr 智能指针模板类； ******************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">UniquePtr</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">constexpr</span> <span class="token function">UniquePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">explicit</span>  <span class="token function">UniquePtr</span><span class="token punctuation">(</span>T<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">UniquePtr</span><span class="token punctuation">(</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">:</span> <span class="token function">_ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>obj <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                _ptr <span class="token operator">=</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">UniquePtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// C++11 delete 禁止方式，C++98 用 private 来隐藏</span>    UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">UniquePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">delete</span> _ptr<span class="token punctuation">;</span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// return std::exchange(_ptr, nullptr); // C++14</span><span class="token punctuation">&#123;</span>T<span class="token operator">*</span> temp <span class="token operator">=</span> _ptr<span class="token punctuation">;</span>        _ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>T<span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token comment">// std::exchange(_ptr, ptr); // C++14</span><span class="token punctuation">&#123;</span>_ptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>UniquePtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>_ptr<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>T<span class="token operator">*</span> _ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up1:"</span> <span class="token operator">&lt;&lt;</span> up1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up2</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>up1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 控制权变更</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up1:"</span> <span class="token operator">&lt;&lt;</span> up1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// nullptr, 此时 up1 已无控制权</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up2:"</span> <span class="token operator">&lt;&lt;</span> up2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UniquePtr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up4:"</span> <span class="token operator">&lt;&lt;</span> up4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>up3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>up2<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// 控制权变更</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up4:"</span> <span class="token operator">&lt;&lt;</span> up4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>up3<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>up4<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up4:"</span> <span class="token operator">&lt;&lt;</span> up4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  *ptr:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>up3<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"up3:"</span> <span class="token operator">&lt;&lt;</span> up3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*****************************打印结果*******************************no default constructorup1:0086DEB8  *ptr:10move constructorup1:00000000up2:0086DEB8  *ptr:10no default constructorno default constructorup3:008656D0  *ptr:30up4:00865700  *ptr:40move assignment constructorup3:0086DEB8  *ptr:10up4:00865700  *ptr:40up3:00865700  *ptr:40up4:0086DEB8  *ptr:10up3:00000000Hello World!destructordestructordestructordestructor ******************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="reference-1"><a href="#reference-1" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://juejin.cn/post/7122641980315680782#heading-1">二、C++实现unique_ptr</a></li><li><a href="https://www.jianshu.com/p/77c2988be336">面试官的动机——实现智能指针1：unique_ptr</a></li><li><a href="https://juejin.cn/post/7099967913594978341">C++进阶：智能指针之unique_ptr</a></li></ul><br><h2 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 【Studio】</p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; C++11 智能指针的深入分析，和动手实现简版的智能指针 &lt;code&gt;std::shared_ptr&lt;/code&gt; 、&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="专栏 - QtExamples系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-QtExamples%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="C++11" scheme="https://ifmet.cn/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>C++ 类的六个特殊成员函数</title>
    <link href="https://ifmet.cn/posts/550d6b96/"/>
    <id>https://ifmet.cn/posts/550d6b96/</id>
    <published>2022-12-19T01:15:13.000Z</published>
    <updated>2022-12-19T01:16:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 分析 C++ Class 的六个特殊成员函数 <sup><a href="https://en.wikipedia.org/wiki/Special_member_functions">wiki</a></sup> ，并且手动实现一番；</p><ol><li>默认构造函数</li><li>析构函数</li><li>复制构造函数</li><li>复制赋值运算符</li><li>移动构造函数</li><li>移动赋值运算符</li></ol><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​特殊成员函数是类（或结构）成员函数，在某些情况下，编译器会自动为你生成。</p><ol><li><strong>default constructor:</strong> 通常没有参数，但可以具有带默认值的参数。</li><li><strong>destructor:</strong> 销毁对象的前一刻执行清理</li><li><strong>copy constructor:</strong> 对<font color=#FF0000 face="STFangsong">新建的的对象</font>进行初始化，形参是 <code>const T&amp;</code></li><li><strong>copy assignment constructor:</strong> 对<font color=#FF0000 face="STFangsong">已有的对象</font>进行赋值，形参是 <code>const T&amp;</code></li><li><strong>move constructor:</strong> 对<font color=#FF0000 face="STFangsong">新建的的对象</font>进行初始化，形参是 <code>T &amp;&amp;</code></li><li><strong>move assignment constructor:</strong> 对<font color=#FF0000 face="STFangsong">已有的对象</font>进行赋值，形参是 <code>T &amp;&amp;</code></li></ol><br><ul><li><p>move 的函数相对于 copy 的函数没有 <code>const</code></p></li><li><p>copy 是属完整的再复制拷贝一份；move 是对将亡的右值进行指针互换、节省空间提升效率</p></li><li><p><strong>”复制 &#x2F; 移动构造函数“</strong> 属于新建对象，无需判断两者是否相等；<strong>”复制 &#x2F; 移动赋值运算符“</strong> 属于已有的对象进行赋值，赋值时需要先判断两者是否相等。</p></li><li><p>若有深拷贝时，<strong>”复制 &#x2F; 移动赋值运算符“</strong> 除了判断相等、数值是否有效；在拷贝字节前，还要先释放旧资源</p></li><li><p>只有当类存储了需要释放的系统资源的句柄，或拥有其指向的内存的指针时，你才需要定义自定义 <strong>”析构函数“</strong></p></li><li><p>三五法则 <sup><a href="https://en.cppreference.com/w/cpp/language/rule_of_three">cppreference.com</a></sup></p></li></ul><br><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>　　💻  <code>win10 22H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++17</code> 见   <a href="https://github.com/XMuli/QtExamples/blob/master/Studio/Studio/SpecialMembers.h">SpecialMembers.h</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/******************************************************************* * Copyright (c) 2022~2023 XMuli  All rights reserved. * Description: C++ 类的六个特殊成员函数 ******************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no-default-val constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            m_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>m_ptr<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            m_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>m_ptr<span class="token punctuation">,</span> other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_ptr<span class="token punctuation">;</span>  <span class="token comment">// Free the existing resource.  重点 !!!</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> n <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                m_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span>m_ptr<span class="token punctuation">,</span> other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>    <span class="token comment">// 行参无 const</span>        <span class="token operator">:</span> <span class="token function">m_ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span>            m_ptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        other<span class="token punctuation">.</span>m_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 行参无 const</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_ptr<span class="token punctuation">;</span>  <span class="token comment">// Free the existing resource.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span>                m_ptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            other<span class="token punctuation">.</span>m_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_ptr<span class="token punctuation">)</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_ptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span><span class="token operator">*</span> m_ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>A <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    A <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"A fun()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A <span class="token function">a1</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// default constructor</span>    A <span class="token function">a2</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// copy constructor</span>    A a3 <span class="token operator">=</span> a1<span class="token punctuation">;</span>                 <span class="token comment">// copy constructor</span>    a1 <span class="token operator">=</span> a3<span class="token punctuation">;</span>                   <span class="token comment">// copy assignment constructor</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------\n\n"</span><span class="token punctuation">;</span>    <span class="token comment">//fn();                    // function returning a A object</span>    A a5 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// move constructor</span>    A a6<span class="token punctuation">;</span>                      <span class="token comment">// default constructor</span>    a6 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// move assignment constructor</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*************************** 运行结果 ******************************** no-default-val constructorcopy constructorcopy constructorcopy assignment constructor----------------------------move constructordefault constructormove assignment constructorHello World!destructordestructordestructordestructordestructor ******************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>拷贝构造函数是 <code> A a2(a1);</code> 形式，还可以是 <code> A a3 = a1;</code> 这种形式。关键看是新创建对象还是已有的对象赋值。move 的函数赋值，借助 <code>std::move()</code> 将左值转换为右值。</p><br><h3 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 的 【Studio】</p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 分析 C++ Class 的六个特殊成员函数 &lt;sup&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special_member_functions&quot;&gt;wiki&lt;/a&gt;&lt;/sup&gt; ，并且手动实现一番；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认构造函数&lt;/li&gt;
&lt;li&gt;析构函数&lt;/li&gt;
&lt;li&gt;复制构造函数&lt;/li&gt;
&lt;li&gt;复制赋值运算符&lt;/li&gt;
&lt;li&gt;移动构造函数&lt;/li&gt;
&lt;li&gt;移动赋值运算符&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="C++11" scheme="https://ifmet.cn/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>小米AX6S刷OpenWrt和开启OpenClash，及刷回官网固件</title>
    <link href="https://ifmet.cn/posts/4d3a9f54/"/>
    <id>https://ifmet.cn/posts/4d3a9f54/</id>
    <published>2022-12-10T20:09:13.000Z</published>
    <updated>2022-12-24T21:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 闲暇，折腾下新购 小米AX6S，刷下 <code>OpenWrt</code>，初次接触记录下。以及开启 OpenClash + clash-rules 的进阶使用</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212101934164.png" width="80%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>miwifi_rb03_firmware_3e872_1.0.54.bin   [官方 2022.08.24]<br>miwifi_rb03_firmware_stable_1.2.7.bin     [官方 2022.03] 可刷机固件，默认开启 telnet </p></blockquote><br><h2 id="刷成-OpenWrt"><a href="#刷成-OpenWrt" class="headerlink" title="刷成 OpenWrt"></a>刷成 OpenWrt</h2><ol><li>先刷开发版 <code>miwifi_rb03_firmware_stable_1.2.7.bin</code> ，默认已开启 Telnet 和 SSH</li><li>通过 SN 码计算自己密码，如 36418&#x2F;K1▇▇▇▇06，密码为 60be9bd0</li><li>连接路由器 <code>telnet 192.168.31.1</code> (输入 root&#x2F;60be9bd0)</li><li>依次执行命令，执行后无提示<ul><li>nvram set ssh_en&#x3D;1 &amp;&amp; nvram set uart_en&#x3D;1 &amp;&amp; nvram set boot_wait&#x3D;on &amp;&amp; nvram set bootdelay&#x3D;3 &amp;&amp; nvram set flag_try_sys1_failed&#x3D;0 &amp;&amp; nvram set flag_try_sys2_failed&#x3D;1</li><li>nvram set flag_boot_rootfs&#x3D;0 &amp;&amp; nvram set “boot_fw1&#x3D;run boot_rd_img;bootm”</li><li>nvram set flag_boot_success&#x3D;1 &amp;&amp; nvram commit &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;dropbear enable &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;dropbear start</li></ul></li><li>新开终端页，上传文件<code>scp .\ax6s-1120\factory.bin root@192.168.31.1:/tmp</code></li><li>用 ssh 链接路由器 <code>ssh root@192.168.31.1</code>；telnet 可以关掉，执行 <code>mtd -r write /tmp/factory.bin firmware</code> 刷机。路由器自动重启，默认IP 为 <code>192.168.6.1</code> 后，默认账号密码 <code>root/password</code> </li><li>输入 ip 进入 openwrt 系统；点击 <strong>“系统 - 备份&#x2F;升级”</strong> 的 <strong>“刷写新的固件”</strong> 选择 <code>ax6s-full.bin</code>  或 <code>ax6s-mini.bin</code> 进行刷写固件</li></ol><br><p><strong>注：</strong></p><ul><li><p>第二步骤通过 SN 码计算 root 密码：</p><ul><li>可在线网站 <a href="miwifi.dev/ssh">miwifi.dev&#x2F;ssh</a> </li><li>亦可 <a href="https://github.com/YangWang92/AX6S-unlock/blob/master/unlock_pwd.py">unlock_pwd.py</a>  脚本计算，<code>python .\unlock_pwd.py SN码</code></li></ul></li><li><p>此版本发现 <code>ax6s-full.bin</code> 实测重启后，WiFi 名称会被重置默认的 bug，而 <code>ax6s-mini.bin</code> 不会</p></li><li><p>本篇主要是刷<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8187405">237176253 </a>大佬的固件，新手可参考<a href="https://www.right.com.cn/forum/thread-8216670-1-1.html">此贴</a></p></li></ul><br><h2 id="开启-OpenClash"><a href="#开启-OpenClash" class="headerlink" title="开启 OpenClash"></a>开启 OpenClash</h2><p> 简介：<a href="https://github.com/vernesong/OpenClash">OpenClash</a> ，其有开源内核 foss 和闭源内核 premuium 之分（CFW、OpenClash 都是后者内核），后者通常支持使用规则集 <a href="https://github.com/Loyalsoldier/clash-rules">clash-rules</a>。初次安装后通常直接运行会失败，LOG 如下，则需要自行安装内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:54 【Dev】版本内核更新失败，请检查网络或稍后再试！<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:52 【Dev】版本内核正在下载，如下载失败请尝试手动下载并上传<span class="token punctuation">..</span>.<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:50 提示: 检测到内核文件不存在，准备开始下载<span class="token punctuation">..</span>.<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:49 第二步: 组件运行前检查<span class="token punctuation">..</span>.<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:49 第一步: 获取配置<span class="token punctuation">..</span>.<span class="token number">2022</span>-12-12 <span class="token number">13</span>:26:49 OpenClash 开始启动<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/openclash/core<span class="token function">wget</span> https://github.com/vernesong/OpenClash/releases/download/Clash/clash-linux-armv8.tar.gz          <span class="token comment"># OpenWrt首页查看内核平台</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> clash-linux-armv8.tar.gz  <span class="token comment"># 解压为clash文件，tun内核需要下对应文件，后改名clash_tun</span><span class="token function">chmod</span> <span class="token number">777</span> clash<span class="token function">chmod</span> <span class="token number">777</span> clash_tun<span class="token comment"># 即可成功开启内核</span><span class="token comment"># 注意优化 dns、ipv6 等操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下列出 Dev 和 TUN 内核下载地址。</p><p><strong>Dev 内核下载</strong>：<a href="https://github.com/vernesong/OpenClash/releases/tag/Clash">https://github.com/vernesong/OpenClash/releases/tag/Clash</a></p><p><strong>Tun 内核下载</strong>：<a href="https://github.com/vernesong/OpenClash/releases/tag/TUN-Premium">https://github.com/vernesong/OpenClash/releases/tag/TUN-Premium</a></p><p><strong>Tun 游戏内核</strong>：<a href="https://github.com/vernesong/OpenClash/releases/tag/TUN">https://github.com/vernesong/OpenClash/releases/tag/TUN</a></p><br><p><strong>使用进阶</strong></p><blockquote><p><a href="https://docs.cfw.lbyczf.com/contents/quickstart.html#%E5%90%AF%E5%8A%A8">官方 Wiki</a></p></blockquote><ol><li>使用默认的规则</li><li>支持使用规则集 <a href="https://github.com/Loyalsoldier/clash-rules">clash-rules</a>： 使用规则集进行更加详细的分流</li><li>使用 rule-provider、 proxy-provider 轻松实现自动更新节点、规则、机场订阅链接，目前觉得最好的一个<a href="https://www.youtube.com/watch?v=IVlnvBQXEgE">教程</a>：解决点击更新订阅，自定义的配置文件都被覆盖为默认 </li><li>过滤部分节点 ； <ul><li>显示指定节点<ul><li>在 <code>proxy-providers</code> 里面加入 <code>filter</code> （只能过滤，不能做排除）</li></ul></li><li>不显示部分节点<ul><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2579#issuecomment-1010748750">#1 commands</a> </li><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2579#issuecomment-1010759851">#2 订阅链接里过滤</a> ，但在 “主界面-Providers-Update All” 此链接，则会失败；</li><li>让提供商大佬后台屏蔽你指定的节点，来自大佬的热情</li></ul></li></ul></li></ol><br><h2 id="刷回官网固件"><a href="#刷回官网固件" class="headerlink" title="刷回官网固件"></a>刷回官网固件</h2><ol><li><p>下载 <a href="https://www.miwifi.com/miwifi_download.html">小米路由器修复工具</a> 后运行</p></li><li><p>笔记本网口和路由器 Lan 口网线连接，<u>确保处于同一个网段</u>，选中官网固件</p></li><li><p>选择 “以太网 -&gt; ip” 后，下一步，此时断电，按住重置按钮直至黄灯闪烁松开，等待几分钟</p></li><li><p>刷机成功</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202301021740158.png" width="60%"/ loading="lazy"></li></ol><br><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=forumdisplay&fid=171&filter=typeid&typeid=94">恩山 AX6S</a>，makr 后续其它固件</li><li><a href="https://github.com/lemoeo/AX6S">Redmi AX6S 解锁 SSH、安装 ShellClash、刷入 OpenWRT 教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 闲暇，折腾下新购 小米AX6S，刷下 &lt;code&gt;OpenWrt&lt;/code&gt;，初次接触记录下。以及开启 OpenClash + clash-rules 的进阶使用&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212101934164.png&quot; width=&quot;80%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - 代理" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="OpenWrt" scheme="https://ifmet.cn/tags/OpenWrt/"/>
    
    <category term="路由器" scheme="https://ifmet.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="网络" scheme="https://ifmet.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>读《找对英语学习方法的第一本书》</title>
    <link href="https://ifmet.cn/posts/9aed2e7b/"/>
    <id>https://ifmet.cn/posts/9aed2e7b/</id>
    <published>2022-12-06T16:21:33.000Z</published>
    <updated>2022-12-06T16:21:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> <u>此书写于二十年前</u>，结合我自身情况参照，有了一种理论指导，可在众多学习方法中有效抉择，亦能在不同阶段更换不同策略。本文为读后的一个简要归纳和札记。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212021803026.png" width="50%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://ifmet.cn/">偕臧的小站</a>“，同步转载于此。</font></p></blockquote><br><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>趁闲暇，花了五天给看完了；感比较久，然统计共 12 h 即可阅完；虽累亦甚至愉悦。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202303080119027.png" width="50%"/ loading="lazy"><br><h4 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h4><p><strong>本书重点探讨成年人学习英文的方法和策略。</strong>对于自学英语，其指明了一些常见的误区，和对近百年来出现过的主流方法进行了归纳，依据 Rod Ellis 《二语习得概论》 理论和进百年得时间验证进行定论。当然，本书本书直接点题，没有一个通用通杀的方法，但又一个通用的自然逻辑顺序可以作为参考，目前在亲身验证中，也在寻找出一条适合自己的道路。</p><br><h4 id="第一章：爱之愈深、误之愈切"><a href="#第一章：爱之愈深、误之愈切" class="headerlink" title="第一章：爱之愈深、误之愈切"></a><font color=#008000>第一章：爱之愈深、误之愈切</font></h4><p><strong>介绍学习外语中常见的误区。</strong></p><ul><li>仅听标准发音，会错而不自知；需多听各种带口音的发音，感受其中差异从而自动纠正</li><li>外语环境<ul><li>出国待两年，就会了：住外国房东家、华人街、加拿大小班纯外教、</li><li>实际生活场景：购物交流、在家听英语广播</li></ul></li><li>早期学习英语不应开口，有一个较长的“沉默期”，过早开口英语能力会石化在一个较低水平</li><li>洋泾浜口语（英语加当地语混杂后的不规范的简化语）：类似中式英语、景点商贩英口语</li><li>汉语是最容易学，会听会说不会写汉字的文盲。</li><li>英语角多和低水平同学交流，不容易犯同样的错误，心理轻松，容易说长句、表达更佳流畅</li><li>常见的词组不属俚语，要掌握；但不需刻意学习俚语，其属于文化风俗、文化库。</li><li>实际应用能力不是靠背诵“固定搭配”来提高的。eg：“Excuse me” 已被点名回答，则不必再说表示此表示插话。注意使用的场景</li><li>不可有意识的记住连读原理并尝试理性的应用它，刻意的连读会适得其反。掌握听和说的连读，是一个自然的过程。</li></ul><br><p><strong>总结：</strong> 不同人的语言学习阶段，最佳学习环境是不同的。对初学者来说，自然外语环境的效果最差，不必寻求。有计划、有步骤的、自己从基础单词听力开始学习。</p><p>初学者有效方式之一：通过图画、实物、肢体语言开始学习与其对应的单个英文单词发音</p><p>中级学习者：适合多媒体和计算机辅助语言，重点学习听力，后由浅入深的阅读</p><p>高级学习者：自然外语环境比较明显，英文电影、合适的英文材料更佳。</p><br><h4 id="第二章：我思故我“说”"><a href="#第二章：我思故我“说”" class="headerlink" title="第二章：我思故我“说”"></a><font color=#008000>第二章：我思故我“说”</font></h4><p><strong>简单介绍一些科学原理，和记单词重在读音、语法不重要的观点。成人需要英语思维方可做到“听”、“说”反应迅速。</strong></p><ul><li><p>哑巴英语</p></li><li><p>外语思维：直接建立外语词汇本身和思维直接连接，还关联相关“外语词汇”以及其慨念与思维概念的直接连接</p></li><li><p>对于高频词汇和句子，尽可能使用外语思维。低频仅占交流中 10% 的的抽象词汇和特殊用法，不必强要外语思维；二八原则，不必耗费大量时间和精力</p></li><li><p>外语的阅读和写作，正确也是用外语思维；但思考或写作前期构思，可使用一定母语思维。</p></li><li><p>“语法-翻译法”教学是不可取的，有明显弊端，属于落后的老古董保守派。</p></li><li><p><strong>单词</strong>：获得多为表现得形式，从而建立词汇意义在大脑得长久印象</p><ul><li>单词分级<ul><li>2000 个最高频单词，使用率 90%；（英文报纸使用率 80%，略低一点）</li><li>5000 个次高频单词，使用率 98%；（包含前 2000，报纸同理稍低）； </li><li>7000 个普通高频单词，使用率 99%；（包含前 5000，报纸同理稍低）</li><li>7000-30000，出现频率为最后得 1% 以内</li></ul></li><li>不靠字典读懂小说，现象是每 10 行生出一个生词（每行 10 词）；5000 加上 570 学院词汇表[p105]，留学看英文教科书不再吃力。</li><li>要求不同<ul><li>第一层：基础 200 单词，量虽少，使用率最高</li><li>第二层：2000 单词，对话中最常用 1000 个单词涵盖普通对话 94% 的词汇，阅读中出现概率为 74%。“通用词汇表(General Sercice List)” 于 1953 年提出，但至今依旧可用，覆盖阅读中 90%，简单对话 95%。词组最好在实际用到它们的文中或者句子掌握，死记硬背效果差。</li><li>第三层：5000 单词达到 98%，建立单词的“声音思维”，一听立刻反应形象或概念而非翻译。至此阶段足以够用。其中大多具体的单词可用具体实物、图像、动作表示来学习；少数为抽象单词。<strong>可借助日常生活中见到的实物建立思维。</strong></li><li>第四层：5000 以上单词，不必苛求完全达到英语思维。通过中文解释学会不会有很大负面影响，阅读更没有问题，听力也仅才 2% 机会。此部分反过来，采取先背诵，在实践中发现和了解真实应用的方式，在做到真正掌握。</li></ul></li><li>学习按照小时计算，而不能用天数。最好设定任务期限，算准时间，提前报名</li><li>英语中为数不多的 180 个不规则动词才是使用频率最高的，达到 70%。大多有小规律可循，生活中最常用 20 个动词全部是不规律，但是极度高频使用，反而是容易掌握的。</li></ul></li><li><p><strong>讲语法</strong></p><ul><li><p>语法知识的多少和交流的流利程度和正确程度之间，没有丝毫关系。语法知识不能不能帮助形成英语思维，反而是在捣乱。</p></li><li><p>对语法的真正掌握，是有特定的自然次序的（拉森-弗里曼习得次序）。无论成年人是否学习语法知识，最后都是按照这个顺序掌握的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1. 进行时 ing2. in3. on4. 复数5. 不规则动词中的过去形式6. 所有格 ’s7. is, am, are8. 冠词9. 规则东西的过去式开始出现-ed10. 规则第三人称单数-s11. 不规则第三人称单数-es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>语法价值的含义：</p><ul><li>首先关注句子含义而非句子结构。反面例子：阅读速度慢，是由于目光在含义价值低的词汇上停留时间明显过长</li><li>掌握语法规律过程中，应该从语法现象的”正确单词之间的搭配“入手，从而建立正确连接，达到自动、迅速、不假思索的语法应用能力</li><li>语法知识总结和介绍<ol><li>第一阶段，零起点在人们后期阶段，了解一点语法还是有用处，”只需知其然，不必知其所以然“就好。方法是重点介绍引文的语法结构，以及和中文语法中不同的指出，使得不感觉奇怪即可。</li><li>第二阶段，接触和学习相当外语后，有一定听力和阅读基础，准备说和写作之前。方法是学生有意识的“注意到”语法变化的具体形式，原则依旧是“只需知其然，不必知其所以然”就好。前提一直是正确有效的输入。</li><li>第三阶段，语法学习的高级阶段。重点不是普通意义上的语法规则，不再是固定搭配，时态变化，动词变化和语序等基础语法，而是在语言表达的高级层面进行完善，最主要是学习正规的英文写作，如商务写作。这种语法提高的核心是“避免歧义”。</li></ol></li></ul></li></ul></li><li><p>论记忆：成人的记忆力远比儿童好</p></li><li><p>对于学习英文来说，应该完全放弃英文字，只学习英语声音。将注意力集中到声音上，真正按照学习语言的因该的自然顺序去掌握外语（“先听说后读写”）。</p></li><li><p>要做到流利的识别英文字，最重要的前提是这些单词的”发音”都已经清晰的在大脑中形成，然后通过各种认知手段去识别文字。</p></li><li><p>学习外语的成年人，国际英标一定要学，总共才是四十几个。</p></li></ul><br><h4 id="第三章：探寻最佳方法之路"><a href="#第三章：探寻最佳方法之路" class="headerlink" title="第三章：探寻最佳方法之路"></a><font color=#008000>第三章：探寻最佳方法之路</font></h4><p><strong>详细介绍百年来学习英文主流方法历史，通过理论支撑和时间验证来阐述各自利弊和实用性。</strong></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212060156228.svg" width="100%"/ loading="lazy"><br><h4 id="第四章：理通法自明"><a href="#第四章：理通法自明" class="headerlink" title="第四章：理通法自明"></a><font color=#008000>第四章：理通法自明</font></h4><p>不存在某一个统一、的具体的“学习方法”，根据学习者自身情况、不同阶段、科学的制定不同的学习策略。</p><p>本章也是前三章的提炼，也是最无用的一章，一切所需要的都需要自己去前三章寻找。</p><p>仍将学习过程分为四个阶段，具体阶段也提供一些操作方法。</p><ul><li><strong>三种学习类型</strong><ol><li>视觉类型（Visual Learner），占据 70%</li><li>听觉类型（Auditory Learner），占据 20%</li><li>运动类型（kinesthetic Learner），占据 10%</li></ol></li><li><strong>外语学习四个阶段</strong><ol><li>入门期（Early Stage）<ul><li>主要锁定基础单词，以名词为主（先学），动词为辅助（后学）；只学单词，不学句子；只练习听力。</li><li>实践方法：生活场景联想</li><li>结束标志：约 3 个月，1000 单词 + 短语</li></ul></li><li>提高期（Upping the Ante）<ul><li>通过听力，建立外语思维，关键是提供适当的“可理解输入”</li><li>实践方法：古恩的序列法</li><li>结束标志：约 6 个月，2000~4000单词，能听懂生活对话，可独自出国旅游；但依旧大量听不懂原版电影。</li></ul></li><li>增长期（Getting Serious）<ul><li>学习重点依旧听力，增加阅读，可以少量针对性的说英语。</li><li>实践方法：词汇量突击，采用快速背单词</li><li>结束标志：一年多，每天至少一小时。英文环境和工作学习无困难，英文电影理解大部分。</li></ul></li><li>高级期（Scaling Everest）<ul><li>重点是补习语法（消除语言中歧义则种等），锻炼英文写作 &#x2F; 商务写作；以及纠正口音。突破“满足于现状”的心理障碍。</li><li>实践方法：没有方法，已经是 Life Style</li><li>结束标志：约 5%的陈年人能达到此“接近母语水平”</li></ul></li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; &lt;u&gt;此书写于二十年前&lt;/u&gt;，结合我自身情况参照，有了一种理论指导，可在众多学习方法中有效抉择，亦能在不同阶段更换不同策略。本文为读后的一个简要归纳和札记。&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202212021803026.png&quot; width=&quot;50%&quot;/&gt;</summary>
    
    
    
    <category term="生活 - 阅读" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="学习方法" scheme="https://ifmet.cn/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>STL 的 std::set 创建自定义结构体的对象，定义严格弱序的比较函数</title>
    <link href="https://ifmet.cn/posts/95758696/"/>
    <id>https://ifmet.cn/posts/95758696/</id>
    <published>2022-08-15T20:45:54.000Z</published>
    <updated>2022-08-15T20:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 对于 <code>STL</code> 中 <code>std::set</code> 创建自定义结构体的对象，发现使用 <strong>“函数对象”</strong> 和 <strong>“定义普通函数 + decltype”</strong> 两种方式会有差异，且其中一种书写会导致崩溃？探究一番后，值得记录一下。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>对于 <code>std::set</code> 创建对象分为两种：⒈基础数据类型; ⒉自定义结构体类型。前者教程很多，故仅讲述后者；</p><p>💻  <code>win10 21H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++17</code></p><br><p>其中对于其中两种方式创建，使用示例如下，此处直接放结论：</p><ul><li>函数对象（仿函数）</li><li>定义普通函数 + decltype</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> cmpSortObj<span class="token operator">></span>  s<span class="token punctuation">;</span>                      <span class="token comment">// "函数对象"创建 set 对象 --> OK</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "定义普通函数 + decltype"创建 set 对象 -->    OK:  编译、运行成功；调试也成功</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  s<span class="token punctuation">;</span>              <span class="token comment">//                                     --> Error:  编译、运行成功；调试会失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>讨论过程，见 <a href="https://scottyeung.top/2019/C-std-set/">C++ std::set</a> 留言区。</li><li>完整源码亦见 <a href="https://github.com/XMuli/QtExamples/edit/master/DeDuplication/Unique/Unique.cpp">Unique.cpp</a></li></ul><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 对于 &lt;code&gt;STL&lt;/code&gt; 中 &lt;code&gt;std::set&lt;/code&gt; 创建自定义结构体的对象，发现使用 &lt;strong&gt;“函数对象”&lt;/strong&gt; 和 &lt;strong&gt;“定义普通函数 + decltype”&lt;/strong&gt; 两种方式会有差异，且其中一种书写会导致崩溃？探究一番后，值得记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="STL" scheme="https://ifmet.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++ 标志位使用：校验、添加、删除</title>
    <link href="https://ifmet.cn/posts/65a4931a/"/>
    <id>https://ifmet.cn/posts/65a4931a/</id>
    <published>2022-08-14T01:12:13.000Z</published>
    <updated>2022-08-14T01:12:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 使用 <code>C++ / Qt</code> 偶尔会遇到需要设置一些属性，在此记录一番，方便下次时候。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C++ 标志位</span>flages <span class="token operator">&amp;</span> WS_POPUP                         <span class="token comment">// 检查一个标志位</span>flages <span class="token operator">|=</span> WS_POPUP                        <span class="token comment">// 设置一个标志位</span>flages <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>WS_POPUP <span class="token operator">|</span> WS_SYSMENU<span class="token punctuation">)</span>        <span class="token comment">// 除去多个标志位</span>    <span class="token comment">// QT 标志位, 除了上面之外，还可用此函数</span><span class="token function">setWindowFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>FramelessWindowHint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 开启此属性 </span><span class="token function">setWindowFlags</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>FramelessWindowHint<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭此属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><span id="more"></span><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 使用 &lt;code&gt;C++ / Qt&lt;/code&gt; 偶尔会遇到需要设置一些属性，在此记录一番，方便下次时候。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-cpp&quot; data-language=&quot;cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// C++ 标志位&lt;/span&gt;
flages &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; WS_POPUP                         &lt;span class=&quot;token comment&quot;&gt;// 检查一个标志位&lt;/span&gt;
flages &lt;span class=&quot;token operator&quot;&gt;|=&lt;/span&gt; WS_POPUP                        &lt;span class=&quot;token comment&quot;&gt;// 设置一个标志位&lt;/span&gt;
flages &lt;span class=&quot;token operator&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;WS_POPUP &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; WS_SYSMENU&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// 除去多个标志位&lt;/span&gt;
    
&lt;span class=&quot;token comment&quot;&gt;// QT 标志位, 除了上面之外，还可用此函数&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setWindowFlags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Qt&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;FramelessWindowHint&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// 开启此属性 &lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setWindowFlags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Qt&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;FramelessWindowHint&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 关闭此属性&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br&gt;</summary>
    
    
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="工程经验" scheme="https://ifmet.cn/tags/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>STL 中给 vector 去重的三种方法</title>
    <link href="https://ifmet.cn/posts/be0b5490/"/>
    <id>https://ifmet.cn/posts/be0b5490/</id>
    <published>2022-08-13T22:19:13.000Z</published>
    <updated>2022-08-15T20:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong> 对 <code>std::vector</code> 中的元素进行去重，其中元素为自定义结构体类型。提供三种思路，并且附上详细示例和分析。关键词内容：</p><ol><li>C++ <code>std::unique</code> 函数去重，却导致的 <code>std::vector</code> 发生改变（遇内存泄漏）</li><li>c++ <code>std::vector</code> 利用 <code>std::set</code> 去重（自定义结构体创建 set 对象的方法）</li><li>自定义结构体在 <code>sort</code> 和 <code>unique</code> 中 <code>比较 / 等于</code> 函数书写（重载、函数、函数对象；严格弱序、相等）</li></ol><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　在开发防病毒业务中，需要对<strong>传入到 <code>vector</code> 中的样本进行去重</strong> ；本篇全程采用 C++ STL 库，未调用 Qt 接口。业务抽象出一个具体例子如下。</p><p><strong>构建环境：</strong> 💻  <code>win10 21H2</code> 📎  <code>Visual Studio 2019</code> 📎 <code>C++17</code></p><br><h3 id="去重思路"><a href="#去重思路" class="headerlink" title="去重思路"></a>去重思路</h3><p>　　搜索发现，对 <code>std::vector</code> 共分为两种，<strong>一种基础数据类型，另一种自定义结构体类型。</strong></p><ol><li><p><strong>基础数据类型</strong></p><p>SO 提供三种解决方案，推荐使用第二种。见 <a href="https://stackoverflow.com/questions/1041620/whats-the-most-efficient-way-to-erase-duplicates-and-sort-a-vector">What’s the most efficient way to erase duplicates and sort a vector?</a></p></li><li><p><strong>自定义结构体类型</strong></p><p>实际项目中，这种我们更常遇到，才是所需。<font color=#D0087E size=4 face="STFangsong"><strong>余下全文重点讲解此。</strong></font></p></li></ol><br><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><font color=#D0087E size=4 face="STFangsong">对于<strong>自定义结构体</strong> 类型，使用 STL 的 <code>set</code>、<code>sort</code>、<code>unique</code> 时，都是需要自定义其<u><strong>严格弱序</strong></u>的<strong>比较函数</strong> 或者<strong>相等函数</strong> 的（此处用 <code>_Pr</code> 表示）。</font></p><p><strong>其中 比较函数 <code>_Pr</code> 的实现有三种（附上的完整源码）：</strong></p><ol><li>在自定义结构体中 <font color=#FF0000 size=4 face="STFangsong"><strong>重载 <code>&lt;</code> 函数</strong></font>，简单，参见代码方式一。略</li><li><font color=#FF0000 size=4 face="STFangsong"><strong>定义一个比较函数</strong></font>，最为常用；亦有用 Lambda 定义；</li><li>使用 <font color=#FF0000 size=4 face="STFangsong"><strong>函数对象</strong></font>，亦简单，属于 2 的变种，在自定义的函数外面套了一层 <code>class</code> 或者 <code>struct</code> 罢了。</li></ol><br><p>PS: 因实际项目中的结构体，没有和无法重载 <code>operator&lt;</code>， 故 1 不可用。然后决定采用 2 方式。</p><p>而 2 式推荐使用常规声明和定义函数方式，而不使用 Lambda 方式定义；原因是后者在某些算法中会失效。</p><p>其中 3 式对于创建 <code>std::set</code> 对象很方便。</p><br><h3 id="『一』vector-sort-unique"><a href="#『一』vector-sort-unique" class="headerlink" title="『一』vector, sort + unique"></a>『一』vector, sort + unique</h3><blockquote><p><strong>思路：</strong> 先利用 sort 进行排序，将重复的项使之相邻，然后利用 unique 的属性进行去重。注意点为 unique 去重特性。</p></blockquote><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 核心代码</span><span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> ite <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpUnique<span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ite<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><p>但其中大有文章，所以举一个完整例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">MyData</span> <span class="token punctuation">&#123;</span>    wstring name<span class="token punctuation">;</span>    wstring md5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmpSort</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">&lt;</span> d2<span class="token punctuation">.</span>md5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmpUnique</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">==</span> d2<span class="token punctuation">.</span>md5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>MyData<span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> L<span class="token string">"a1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span> L<span class="token string">"a2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span> L<span class="token string">"b1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           <span class="token punctuation">&#123;</span> L<span class="token string">"b2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    wcout<span class="token punctuation">.</span><span class="token function">imbue</span><span class="token punctuation">(</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> LC_CTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整前--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> vec<span class="token punctuation">)</span>         wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> ite <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpUnique<span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ite<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整后--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> vec<span class="token punctuation">)</span>          wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>运行查看结果，似乎是完美符合预期的？？？ 可真的如此？</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220813131959.png" width="45%"/ loading="lazy"><p><font color=#FF0000 size=4 face="STFangsong"><strong>实际它会产生内存泄漏，原因是由于使用的自定义 cmpUnique() 函数导致的，其并未是真正的两个结构体对象相等，且 stackoverflow.com 亦能够佐证 Ref <sup>[4]</sup></strong> </font></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220813133846.png" width="90%"/ loading="lazy"><p>尝试将 <code>cmpUnique()</code> 修改如下，便不再有内存泄漏了，但此功能函数，却也”失效”了，没有起到去重的效果，可以调试自行查验效果</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmpUnique</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//return d1.md5 == d2.md5;                          // 此『不严格相等』会内存泄漏</span>    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">==</span> d2<span class="token punctuation">.</span>md5 <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>name <span class="token operator">==</span> d2<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token comment">// 此『严格相等』满足语法，却不满足实际业务需求</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>更新</strong></p><p>　　本想后面有时间再继续研究下方式一，看看自定义 <code>cmpUnique（）</code> 修改达到严格弱序的要求，能够不会有内存泄漏，亦能够完美符合要求。但心里痒痒，总是还有一点困惑，两天后，半夜睡不着，又起来研究了下。</p><p>　　翻了下  <code>std::unique()</code> 的默认第三个参数的默认实现，如图，发现就是直接 <code>==</code> 比较。那就是严格的对象相等，满足语法和编译，但不满足业务的需要，故这个点也没有疑问了。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220815113235.png" width="85%"/ loading="lazy"><br><p><strong>实际情况复杂得多：</strong> 实际的 <code>MyData</code> 结构体是微软的 COM 组件中的 <code>Bundle</code> 结构，每一个**<code>Bundle</code> 对象** 的属性项目的数量和内容都可能不同，仅有少部分重叠。需求为仅只需比较的两三个属性内容是否完全一致，来判断两个对象是否为同重复文件。亦没有提供直接判断两个 <strong><code>Bundle</code> 对象</strong> 相等的接口。简直是要要命， Help，Help，Help！！！</p><p><strong>综上：</strong> 决定弃用此方式，改用下面『方式二』，且最终完成目的。</p><br><h3 id="『二』vector-set（手动赋值）"><a href="#『二』vector-set（手动赋值）" class="headerlink" title="『二』vector + set（手动赋值）"></a>『二』vector + set（手动赋值）</h3><blockquote><p><strong>思路：</strong> 很简单，先将 vector 数据导入 set，利用其单一性去重，然后再数据赋值给 vector，完美的思路，亦不会有方式一的内存泄漏。<font color=#008000 size=4 face="STFangsong"><strong>其中难点为给创建 std::set 的对象进行自定义类型排序和赋值。其难点解决方式可参考 Ref<sup>[2]</sup>的方式三</strong> </font></p><p>其中 std::set 的自定义排序函数 cmpSort()，又分为定义在类外还是类内，若是前者则甚至简单，若是后者，则必须定义为<strong>静态成员函数</strong>。</p></blockquote><br><h4 id="cmpSort-定义在-Class-外"><a href="#cmpSort-定义在-Class-外" class="headerlink" title="cmpSort() 定义在 Class 外"></a>cmpSort() 定义在 Class 外</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 核心代码</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 此种方式比较少见，且第二个 &amp; 若想省略亦可，则编译器亦会自动添加</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>注：</strong> 若偷懒采用 <code>set&lt;MyData, decltype(cmpSort)*&gt;  s;</code> 此方式定义对象，则会导致调用 <code>s.insert(vec[i]);</code> 时崩溃，坑。</p><br><h4 id="cmpSort-定义为-Class-成员变量"><a href="#cmpSort-定义为-Class-成员变量" class="headerlink" title="cmpSort() 定义为 Class 成员变量"></a>cmpSort() 定义为 Class 成员变量</h4><p>这种大概是实际业务中最常遇到的场景，亦是这几种最复杂的一种。 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 核心代码</span>set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 本行定义为重点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>m_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>其中 Class DeDuplication 种 <code>cmpSort()</code> 必须为 <code>static</code> 类型，定义如下。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">MyData</span><span class="token punctuation">&#123;</span>    wstring name<span class="token punctuation">;</span>    wstring md5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DeDuplication</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">cmpSort</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyData<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ***** 注意，必须是静态 *****</span>        <span class="token comment">// Simple example</span>        <span class="token keyword">return</span> d1<span class="token punctuation">.</span>md5 <span class="token operator">&lt;</span> d2<span class="token punctuation">.</span>md5<span class="token punctuation">;</span>        <span class="token comment">// Complex sample</span>        <span class="token comment">//if (d1.md5 != d2.md5)</span>        <span class="token comment">//    return d1.md5 &lt; d2.md5;</span>        <span class="token comment">//else</span>        <span class="token comment">//    return d1.name &lt; d2.name;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        wcout<span class="token punctuation">.</span><span class="token function">imbue</span><span class="token punctuation">(</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> LC_CTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整前--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> m_vec<span class="token punctuation">)</span>            wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>MyData<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>  <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DeDuplication<span class="token double-colon punctuation">::</span>cmpSort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>m_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"----------调整后--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> m_vec<span class="token punctuation">)</span>            wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.name]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> L<span class="token string">"[it.md5]"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>md5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>MyData<span class="token operator">></span>  m_vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> L<span class="token string">"a1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                              <span class="token punctuation">&#123;</span> L<span class="token string">"a2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"B9204B6362A65C248950D5A41F341DCC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                              <span class="token punctuation">&#123;</span> L<span class="token string">"b1.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                              <span class="token punctuation">&#123;</span> L<span class="token string">"b2.exe"</span><span class="token punctuation">,</span> L<span class="token string">"C96D1AA5D314954417C28A645ED72665"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>若是普通类型，会导致 <code>std::set</code> 对象编译不过，报错如下，其解释参考 devblogs.microsoft.com Ref<sup>[3]</sup>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Error</span> <span class="token punctuation">(</span>active<span class="token punctuation">)</span>E0289no instance of constructor <span class="token string">"std::set&lt;_Kty, _Pr, _Alloc>::set [with _Kty=MyData, _Pr=bool (DeDuplication::**)(const MyData &amp;d1, const MyData &amp;d2), _Alloc=std::allocator&lt;MyData>]"</span> matches the argument listDeDuplication<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="『三』vector-set（构造函数）"><a href="#『三』vector-set（构造函数）" class="headerlink" title="『三』vector + set（构造函数）"></a>『三』vector + set（构造函数）</h3><p>　　其性能不如『方式二』，略，可参见 Ref<sup>[1]</sup> 种的第三种。</p><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　最后结合实际，采用方式二的　<code>class</code> 内定义 <code>static</code> 此方式最合宜解决此问题。且附上完整源码。</p><ol><li><p>方式一和方式二的类外定义，见完整源码的项目 <a href="https://github.com/XMuli/QtExamples/blob/master/DeDuplication/Unique/Unique.cpp">Unique</a></p></li><li><p>方式二的类内定义，见完整源码的项目 <a href="https://github.com/XMuli/QtExamples/blob/master/DeDuplication/DeDuplication/DeDuplication.h">DeDuplication</a></p></li><li><p>对于给 <code>std::set</code> 创建自定义结构体对象，可见 <a href="https://blog.csdn.net/qq_33154343/article/details/126354597">STL 的 std::set 创建自定义结构体的对象，定义严格弱序的比较函数</a></p></li></ol><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a> 【DeDuplication】</p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p><br><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><sup>[1]</sup>: <a href="https://stackoverflow.com/questions/1041620/whats-the-most-efficient-way-to-erase-duplicates-and-sort-a-vector">What’s the most efficient way to erase duplicates and sort a vector?</a></p><p><sup>[2]</sup>: <a href="https://blog.csdn.net/lv1224/article/details/79789638">C++ set自定义排序</a></p><p><sup>[3]</sup>: <a href="https://devblogs.microsoft.com/oldnewthing/20201007-00/?p=104341">Error C3867: non-standard syntax; use ‘&amp;’ to create a pointer to member: What it means and how to fix it</a></p><p><sup>[4]</sup>:  <a href="https://stackoverflow.com/questions/15987082/eliminating-duplicates-from-vector-of-custom-object-stdunique-causes-crash-on">eliminating duplicates from vector of custom object - std:unique causes crash on free</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt; 对 &lt;code&gt;std::vector&lt;/code&gt; 中的元素进行去重，其中元素为自定义结构体类型。提供三种思路，并且附上详细示例和分析。关键词内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++ &lt;code&gt;std::unique&lt;/code&gt; 函数去重，却导致的 &lt;code&gt;std::vector&lt;/code&gt; 发生改变（遇内存泄漏）&lt;/li&gt;
&lt;li&gt;c++ &lt;code&gt;std::vector&lt;/code&gt; 利用 &lt;code&gt;std::set&lt;/code&gt; 去重（自定义结构体创建 set 对象的方法）&lt;/li&gt;
&lt;li&gt;自定义结构体在 &lt;code&gt;sort&lt;/code&gt; 和 &lt;code&gt;unique&lt;/code&gt; 中 &lt;code&gt;比较 / 等于&lt;/code&gt; 函数书写（重载、函数、函数对象；严格弱序、相等）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Visual Studio" scheme="https://ifmet.cn/tags/Visual-Studio/"/>
    
    <category term="C++11" scheme="https://ifmet.cn/tags/C-11/"/>
    
    <category term="C++17" scheme="https://ifmet.cn/tags/C-17/"/>
    
  </entry>
  
  <entry>
    <title>Misleading indentation; statement is not part of the previous &#39;if&#39;</title>
    <link href="https://ifmet.cn/posts/28b03c75/"/>
    <id>https://ifmet.cn/posts/28b03c75/</id>
    <published>2022-08-07T19:31:13.000Z</published>
    <updated>2022-08-07T19:31:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong> 使用的 Qt 升级到了 5.15.2，然后 IDE 编译报警告⚠如下，强迫症犯了，得消除掉。</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202208071916076.png" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">screenshot.cpp:164:2: Misleading indentation; statement is not part of the previous &#39;if&#39;screenshot.cpp:161:5: previous statement is here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PS：💻  <code>win10 21H2</code> 📎 <code>Qt 5.15.2</code> 📎  <code>QtCreator 8.0.0 </code> </p><br><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>修改，将其修改为 <code>Tab</code> 按键或者 <code>回车自动对齐</code>，即可消除此警告⚠；改动如下</p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202208071917192.png" width="80%"/ loading="lazy"><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt; 使用的 Qt 升级到了 5.15.2，然后 IDE 编译报警告⚠如下，强迫症犯了，得消除掉。&lt;/p&gt;
&lt;img src=&quot;https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/202208071916076.png&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>CMake 设置 Target 输出目录和后缀名</title>
    <link href="https://ifmet.cn/posts/4af498c8/"/>
    <id>https://ifmet.cn/posts/4af498c8/</id>
    <published>2022-07-23T01:32:13.000Z</published>
    <updated>2022-07-23T01:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>**简  述: **  <code>CMake</code> 设置 <code>Target</code> 输出目录和后缀名</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span>                      <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        <span class="token comment"># 可执行文件的输出目录</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span>                         <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        <span class="token comment">#    库文件的输出目录</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG</span>        <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        <span class="token comment"># debug   可执行文件的输出目录</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE</span>      <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>        <span class="token comment"># release 可执行文件的输出目录</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG</span>        <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       <span class="token comment"># debug      库文件的输出目录</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE</span>      <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       <span class="token comment"># release    库文件的输出目录</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_DEBUG_POSTFIX</span>                         <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       <span class="token comment"># debug        库文件的后缀名</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RELEASE_POSTFIX</span>                       <span class="token string">"xxx/path"</span><span class="token punctuation">)</span>       <span class="token comment"># release      库文件的后缀名</span><span class="token keyword">set_target_properties</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>TARGET_NAME<span class="token punctuation">&#125;</span> <span class="token namespace">PROPERTIES</span> <span class="token property">DEBUG_POSTFIX</span> <span class="token string">"_d"</span><span class="token punctuation">)</span>     <span class="token comment"># debug      可执行文件的后缀名</span><span class="token keyword">set_target_properties</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>TARGET_NAME<span class="token punctuation">&#125;</span> <span class="token namespace">PROPERTIES</span> <span class="token property">RELEASE_POSTFIX</span> <span class="token string">"_r"</span><span class="token punctuation">)</span>   <span class="token comment"># release   可执行文件的后缀名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>一. <code>set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/../bin)</code> </p><p>上面的语句能设置可执行文件的输出目录</p><p>在 Win + VS 环境下，会自动在你所设置的目录后面扩展一层 <code>&lt;CONFIG&gt;</code> 目录，所以最终生成的 Debug 版本程序会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../bin/Debug</code> 目录下，Release 版本程序会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../bin/Release</code> 目录下。</p><p>在 Linux + GCC 环境下，无论是 Debug 还是 Release，生成的可执行程序会直接放在你所设置的目录下，不会有差异。</p> <br><p>二. <code>set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/../lib)</code> </p><p>上面的语句能设置库文件的输出目录</p><p>在 Win + VS 环境下，会自动在你所设置的目录后面扩展一层 <code>&lt;CONFIG&gt;</code> 目录，所以最终生成的 Debug 版本库会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../lib/Debug</code> 目录下，Release 版本库会在 <code>$&#123;PROJECT_SOURCE_DIR&#125;/../lib/Release</code> 目录下。</p><p>在 Linux + GCC 环境下，无论是 Debug 还是 Release，生成的库文件会直接放在你所设置的目录下，不会有差异。</p> <br><p>三. <code>set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG $&#123;PROJECT_SOURCE_DIR&#125;/../bin)</code>   <code>set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE $&#123;PROJECT_SOURCE_DIR&#125;/../bin)</code> </p><p>上面两条语句分别设置了 Debug 版本和 Release 版本可执行文件的输出目录，</p><p>一旦设置上面的属性，在任何环境下生成的可执行文件都将直接放在你所设置的目录.</p> <br><p>四. <code>set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG $&#123;PROJECT_SOURCE_DIR&#125;/../lib)</code>   <code>set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE $&#123;PROJECT_SOURCE_DIR&#125;/../lib)</code> </p><p>上面两条语句分别设置了 Debug 版本和 Release 版本库文件的输出目录，</p><p>一旦设置上面的属性，在任何环境下生成的库文件都将直接放在你所设置的目录。</p> <br><p>五. <code>set(CMAKE_DEBUG_POSTFIX &quot;_d&quot;)</code>   <code>set(CMAKE_RELEASE_POSTFIX &quot;_r&quot;)</code> </p><p>上面两条语句分别设置了 Debug 版本和 Release 版本下库文件的后缀名。</p> <br><p>六. <code>set_target_properties($&#123;TARGET_NAME&#125; PROPERTIES DEBUG_POSTFIX &quot;_d&quot;)</code>   <code>set_target_properties($&#123;TARGET_NAME&#125; PROPERTIES RELEASE_POSTFIX &quot;_r&quot;)</code> </p><p>上面两条语句分别设置了 Debug 版本和 Release 版本下可执行文件的后缀名。</p><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/ExCMake">ExCMake</a></p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>CMake</code> 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;**简  述: **  &lt;code&gt;CMake&lt;/code&gt; 设置 &lt;code&gt;Target&lt;/code&gt; 输出目录和后缀名&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-cmake&quot; data-language=&quot;cmake&quot;&gt;&lt;code class=&quot;language-cmake&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;EXECUTABLE_OUTPUT_PATH&lt;/span&gt;                      &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        		&lt;span class=&quot;token comment&quot;&gt;# 可执行文件的输出目录&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;LIBRARY_OUTPUT_PATH&lt;/span&gt;                         &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        		&lt;span class=&quot;token comment&quot;&gt;#    库文件的输出目录&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG&lt;/span&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        		&lt;span class=&quot;token comment&quot;&gt;# debug   可执行文件的输出目录&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE&lt;/span&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;        		&lt;span class=&quot;token comment&quot;&gt;# release 可执行文件的输出目录&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG&lt;/span&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;       		&lt;span class=&quot;token comment&quot;&gt;# debug      库文件的输出目录&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE&lt;/span&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;       		&lt;span class=&quot;token comment&quot;&gt;# release    库文件的输出目录&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CMAKE_DEBUG_POSTFIX&lt;/span&gt;                         &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;       		&lt;span class=&quot;token comment&quot;&gt;# debug        库文件的后缀名&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CMAKE_RELEASE_POSTFIX&lt;/span&gt;                       &lt;span class=&quot;token string&quot;&gt;&quot;xxx/path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;       		&lt;span class=&quot;token comment&quot;&gt;# release      库文件的后缀名&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;set_target_properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&amp;#123;&lt;/span&gt;TARGET_NAME&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;PROPERTIES&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;DEBUG_POSTFIX&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;# debug      可执行文件的后缀名&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;set_target_properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&amp;#123;&lt;/span&gt;TARGET_NAME&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;PROPERTIES&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;RELEASE_POSTFIX&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# release   可执行文件的后缀名&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="学习 - CMake" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-CMake/"/>
    
    
  </entry>
  
  <entry>
    <title>CMake 之 BUILD_SHARED_LIBS 和 CMAKE_BUILD_TYPE 用法教程</title>
    <link href="https://ifmet.cn/posts/29f14999/"/>
    <id>https://ifmet.cn/posts/29f14999/</id>
    <published>2022-07-22T23:32:13.000Z</published>
    <updated>2022-07-22T23:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>**简  述: ** 起源于 <a href="https://github.com/Qt-Widgets/qtacrylicmaterial/pull/2">#2</a> ，发现debug 编译失败，而release 编译成功，根因为默认生成产物和预期不符，故提的一个 PR 。发现与之相关为 CMake 中 <code>CMAKE_BUILD_TYPE</code> 和 <code>BUILD_SHARED_LIBS</code> 的两个变量知识点。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><p>　　💻  <code>win10 21H2</code> 📎 <code>Qt 5.12.11</code> 📎  <code>Visual Studio 2019</code> </p><br><h3 id="BUILD-SHARED-LIBS"><a href="#BUILD-SHARED-LIBS" class="headerlink" title="BUILD_SHARED_LIBS"></a>BUILD_SHARED_LIBS</h3><p>是 add_library() 的一个全局标志，当 add_library() 没有指定 <code>[STATIC | SHARED | MODULE]</code> 是哪一个时，可以决定为生成 <em>动态库</em> 还是 <em>静态库</em>。</p><br><p><strong>Typical values：</strong></p><ul><li><code>ON</code>: 让 add_library() 生成 .dll 动态库，对应 SHARED</li><li><code>OFF</code>: 让 add_library() 生成 .lib 静态库，对应 STATIC ；<strong>默认值</strong></li></ul><br><p>CMake 代码如下，对应生成产物如图：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">BUILD_SHARED_LIBS</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>                 <span class="token comment"># default is OFF</span><span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>SRCS_MAIN<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/20220721125204.png" alt="img" loading="lazy"></p><br><h3 id="CMAKE-BUILD-TYPE"><a href="#CMAKE-BUILD-TYPE" class="headerlink" title="CMAKE_BUILD_TYPE"></a>CMAKE_BUILD_TYPE</h3><p>指定 <strong>生成产物</strong> 的构建类型。</p><p><strong>Typical values：</strong></p><ul><li><code>Debug</code>：详细调试信息</li><li><code>Release</code>：无调试信息</li><li><code>RelWithDebInfo</code>：带有调试信息的 Release，依旧可能又略微优化</li><li><code>MinSizeRel</code>：没使用过</li></ul><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于生成 .dll&#x2F;.lib 的项目而言：</p><ol><li>推荐使用 add_library() 时不指定 STATIC | SHARED，而是由 BUILD_SHARED_LIBS 变量来控制。</li><li>同时又通过自定义宏来决定，生成的 .dll 是采用 <code>__declspec(dllexport)</code> 或 <code>__declspec(dllimport)</code>。</li></ol><p>这部分，以及结合如何使用 .dll 后面单独详细讲解一篇。</p><br><p><strong>附：</strong> 本篇对应的修改源码在此 <a href="https://github.com/XMuli/AcrylicWindow/blob/master/AcrylicMaterial/CMakeLists.txt">CMakeLists.txt</a></p><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/XMuli/ExCMake">ExCMake</a></p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴这个系列的 <code>CMake</code> 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;**简  述: ** 起源于 &lt;a href=&quot;https://github.com/Qt-Widgets/qtacrylicmaterial/pull/2&quot;&gt;#2&lt;/a&gt; ，发现debug 编译失败，而release 编译成功，根因为默认生成产物和预期不符，故提的一个 PR 。发现与之相关为 CMake 中 &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; 和 &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; 的两个变量知识点。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - CMake" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-CMake/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows 编程之 WINUSERAPI 和 WINAPI 区别</title>
    <link href="https://ifmet.cn/posts/ec046916/"/>
    <id>https://ifmet.cn/posts/ec046916/</id>
    <published>2022-07-19T20:12:13.000Z</published>
    <updated>2022-07-19T20:12:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述:</strong>  Window API 中经常遇到的 <strong>WINUSERAPI</strong> 和 <strong>WINAPI</strong> 各自的含义。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 “<a href="https://xmuli.tech/"><strong>偕臧的小站</strong></a>“，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　在研究实现跨平台的  <a href="https://github.com/XMuli/AcrylicWindow">AcrylicWindow</a> <strong>亚克力（类似透明磨砂）</strong> 效果，调用 Windows API 时，发现其函数的定义如下，发现这两个宏有点陌生，故有点出神，于是查了查 <code>WINUSERAPI</code> &#x2F; <code>WINAPI</code> 的含义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">WINUSERAPI BOOL WINAPI <span class="token function">SetWindowCompositionAttribute</span><span class="token punctuation">(</span> _In_ HWND hWnd<span class="token punctuation">,</span>   _Inout_ WINDOWCOMPOSITIONATTRIBDATA<span class="token operator">*</span> pAttrData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="WINUSERAPI"><a href="#WINUSERAPI" class="headerlink" title="WINUSERAPI"></a>WINUSERAPI</h2><p>表示函数的导入</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">WINUSERAPI<span class="token comment">// 定义一</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>_USER32_<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WINUSERAPI</span> <span class="token expression">DECLSPEC_IMPORT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WINUSERAPI</span> <span class="token expression"><span class="token keyword">extern</span> </span><span class="token string">"C"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// 定义二</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DECLSPEC_IMPORT</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>从两层含义定义可知，<code>WINUSERAPI</code> 粗略看作关键词 __declspec(dllimport)；</p><p>__declspec(dllimport) 表示你告诉编译器要显式的从 dll 导入函数；尤其当类中有 static 成员时，没有它基本都会 Link 失败。可参见 <a href="https://blog.csdn.net/sinat_22991367/article/details/73695039">此文</a></p><img src="https://fastly.jsdelivr.net/gh/XMuli/xmuliPic@pic/2022/Snipaste_2022-06-28_18-33-54.png" width="100%"/ loading="lazy"><br><h2 id="WINAPI"><a href="#WINAPI" class="headerlink" title="WINAPI"></a>WINAPI</h2><p>  常用宏 WINAPI 或 CALLBACK 来表示 <code>__stdcall</code> 调用约定。表示参数入栈时，是从右往左依次顺序入栈的。 其它调用约定自行 Googel 关键词：函数调用约定</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span> #define CALLBACK __stdcall<span class="token number">2</span> #define WINAPI __stdcall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h2><p><a href="https://github.com/XMuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> ⭐ 和 <code>fork</code> 🍴 这个系列的 <code>C++ / QT / DTK</code> 学习，附学习由浅入深的目录，这里你可以学到如何亲自编写这类软件的经验，这是一系列完整的教程，并且<strong>永久免费</strong>！”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述:&lt;/strong&gt;  Window API 中经常遇到的 &lt;strong&gt;WINUSERAPI&lt;/strong&gt; 和 &lt;strong&gt;WINAPI&lt;/strong&gt; 各自的含义。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    <category term="学习 - C/C++ 序二 经验" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-C-C-%E5%BA%8F%E4%BA%8C-%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Windows 编程" scheme="https://ifmet.cn/tags/Windows-%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
